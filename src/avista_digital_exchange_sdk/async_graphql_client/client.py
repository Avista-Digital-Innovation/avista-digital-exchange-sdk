# Generated by ariadne-codegen on 2023-07-17 15:57
# Source: ../step_1_gqlg/output/queries.graphql

from typing import AsyncIterator, List, Optional, Union

from .base_model import UNSET, UnsetType
from .collaborative_add_service_to_collaborative import (
    CollaborativeAddServiceToCollaborative,
)
from .collaborative_get_collaborative import CollaborativeGetCollaborative
from .collaborative_list_collaborative_member_organization_requests import (
    CollaborativeListCollaborativeMemberOrganizationRequests,
)
from .collaborative_list_collaborative_services import (
    CollaborativeListCollaborativeServices,
)
from .collaborative_list_collaboratives import CollaborativeListCollaboratives
from .collaborative_list_collaboratives_service_shared_with import (
    CollaborativeListCollaborativesServiceSharedWith,
)
from .collaborative_remove_service_from_collaborative import (
    CollaborativeRemoveServiceFromCollaborative,
)
from .collaborative_update_collaborative_member_organization import (
    CollaborativeUpdateCollaborativeMemberOrganization,
)
from .data_capture_attach_file import DataCaptureAttachFile
from .data_capture_create_capture import DataCaptureCreateCapture
from .data_capture_delete_attachment import DataCaptureDeleteAttachment
from .data_capture_delete_capture import DataCaptureDeleteCapture
from .data_capture_get_active_capture_data_export_download_url import (
    DataCaptureGetActiveCaptureDataExportDownloadUrl,
)
from .data_capture_get_capture import DataCaptureGetCapture
from .data_capture_get_capture_authentication_token import (
    DataCaptureGetCaptureAuthenticationToken,
)
from .data_capture_get_data_export_download_url import (
    DataCaptureGetDataExportDownloadUrl,
)
from .data_capture_get_data_model import DataCaptureGetDataModel
from .data_capture_get_data_model_export import DataCaptureGetDataModelExport
from .data_capture_get_file_attachment_download_url import (
    DataCaptureGetFileAttachmentDownloadUrl,
)
from .data_capture_get_python_s_d_k_sample import DataCaptureGetPythonSDKSample
from .data_capture_handle_completion import DataCaptureHandleCompletion
from .data_capture_list_attachments import DataCaptureListAttachments
from .data_capture_list_captures import DataCaptureListCaptures
from .data_capture_notify_capture_complete import DataCaptureNotifyCaptureComplete
from .data_capture_publish_data import DataCapturePublishData
from .data_capture_regenerate_authentication_token import (
    DataCaptureRegenerateAuthenticationToken,
)
from .data_capture_start_capture import DataCaptureStartCapture
from .data_capture_stop_capture import DataCaptureStopCapture
from .data_capture_update_capture import DataCaptureUpdateCapture
from .data_capture_update_data_model import DataCaptureUpdateDataModel
from .enums import (
    CollaborativeMemberOrganizationState,
    CollaborativeMemberPermission,
    DataCaptureTimeConfigType,
    DataCaptureType,
    ExportFileFormat,
    ServiceType,
    TimeSeriesDbQueryType,
    TimeSeriesQueryOutputFileType,
    UserAccountState,
    UserRole,
)
from .input_types import (
    DataCaptureDataModelInput,
    DataCaptureDataRecordInput,
    DataStoreObjectIdInput,
    EndpointPropertyInput,
    EndpointQueryFilter,
    IotDataRecordInput,
    ModelPropertyInput,
    ModelTelemetryInput,
    TimeSeriesDbDataInput,
    TimeSeriesQueryAssetInput,
)
from .iot_add_endpoints_to_group import IotAddEndpointsToGroup
from .iot_cancel_query import IotCancelQuery
from .iot_create_endpoint import IotCreateEndpoint
from .iot_create_group import IotCreateGroup
from .iot_create_hub import IotCreateHub
from .iot_create_model import IotCreateModel
from .iot_create_new_model_version import IotCreateNewModelVersion
from .iot_delete_endpoint import IotDeleteEndpoint
from .iot_delete_group import IotDeleteGroup
from .iot_delete_hub import IotDeleteHub
from .iot_delete_model import IotDeleteModel
from .iot_generate_query_result_export import IotGenerateQueryResultExport
from .iot_get_endpoint import IotGetEndpoint
from .iot_get_endpoint_token import IotGetEndpointToken
from .iot_get_group import IotGetGroup
from .iot_get_hub import IotGetHub
from .iot_get_model import IotGetModel
from .iot_get_model_in_d_t_d_l_format import IotGetModelInDTDLFormat
from .iot_list_endpoint_last_values import IotListEndpointLastValues
from .iot_list_endpoints_in_hub import IotListEndpointsInHub
from .iot_list_groups import IotListGroups
from .iot_list_groups_endpoints_last_values import IotListGroupsEndpointsLastValues
from .iot_list_hubs import IotListHubs
from .iot_list_hubs_endpoints_last_values import IotListHubsEndpointsLastValues
from .iot_list_models import IotListModels
from .iot_notify_query_export_complete import IotNotifyQueryExportComplete
from .iot_publish import IotPublish
from .iot_query_by_time_range import IotQueryByTimeRange
from .iot_regenerate_endpoint_token import IotRegenerateEndpointToken
from .iot_remove_endpoints_from_group import IotRemoveEndpointsFromGroup
from .iot_update_endpoint import IotUpdateEndpoint
from .iot_update_endpoint_properties import IotUpdateEndpointProperties
from .iot_update_group import IotUpdateGroup
from .iot_update_hub import IotUpdateHub
from .iot_update_model import IotUpdateModel
from .iot_update_model_used_by_endpoint import IotUpdateModelUsedByEndpoint
from .modified_async_base_client import AsyncBaseClient
from .notifications_notify_upload_complete import NotificationsNotifyUploadComplete
from .on_capture_publish_data import OnCapturePublishData
from .on_iot_publish import OnIotPublish
from .on_notify_capture_complete import OnNotifyCaptureComplete
from .on_notify_iot_query_export_complete import OnNotifyIotQueryExportComplete
from .on_notify_time_series_query_export_complete import (
    OnNotifyTimeSeriesQueryExportComplete,
)
from .on_notify_upload_complete import OnNotifyUploadComplete
from .on_start_capture import OnStartCapture
from .on_stop_capture import OnStopCapture
from .on_time_series_db_publish import OnTimeSeriesDbPublish
from .platform_admin_add_collaborative_member import PlatformAdminAddCollaborativeMember
from .platform_admin_create_collaborative import PlatformAdminCreateCollaborative
from .platform_admin_create_organization import PlatformAdminCreateOrganization
from .platform_admin_create_user import PlatformAdminCreateUser
from .platform_admin_delete_collaborative import PlatformAdminDeleteCollaborative
from .platform_admin_delete_organization import PlatformAdminDeleteOrganization
from .platform_admin_delete_user import PlatformAdminDeleteUser
from .platform_admin_delete_users_collaboratives import (
    PlatformAdminDeleteUsersCollaboratives,
)
from .platform_admin_delete_users_services import PlatformAdminDeleteUsersServices
from .platform_admin_get_collaborative import PlatformAdminGetCollaborative
from .platform_admin_get_organization import PlatformAdminGetOrganization
from .platform_admin_get_user import PlatformAdminGetUser
from .platform_admin_list_collaboratives import PlatformAdminListCollaboratives
from .platform_admin_list_organizations import PlatformAdminListOrganizations
from .platform_admin_list_users import PlatformAdminListUsers
from .platform_admin_migrate_users_collaboratives_ownership import (
    PlatformAdminMigrateUsersCollaborativesOwnership,
)
from .platform_admin_migrate_users_services_ownership import (
    PlatformAdminMigrateUsersServicesOwnership,
)
from .platform_admin_remove_collaborative_member import (
    PlatformAdminRemoveCollaborativeMember,
)
from .platform_admin_resend_user_invitation import PlatformAdminResendUserInvitation
from .platform_admin_update_collaborative import PlatformAdminUpdateCollaborative
from .platform_admin_update_collaborative_member import (
    PlatformAdminUpdateCollaborativeMember,
)
from .platform_admin_update_organization import PlatformAdminUpdateOrganization
from .platform_admin_update_user import PlatformAdminUpdateUser
from .storage_create_data_store import StorageCreateDataStore
from .storage_create_data_store_directory import StorageCreateDataStoreDirectory
from .storage_create_data_store_file import StorageCreateDataStoreFile
from .storage_create_data_store_file_data_view import StorageCreateDataStoreFileDataView
from .storage_delete_data_store import StorageDeleteDataStore
from .storage_delete_data_store_directory import StorageDeleteDataStoreDirectory
from .storage_delete_data_store_file import StorageDeleteDataStoreFile
from .storage_delete_data_store_file_data_view import StorageDeleteDataStoreFileDataView
from .storage_get_data_store import StorageGetDataStore
from .storage_get_data_store_directory import StorageGetDataStoreDirectory
from .storage_get_data_store_file import StorageGetDataStoreFile
from .storage_get_data_store_file_download_url import StorageGetDataStoreFileDownloadUrl
from .storage_get_data_store_zip_download_url import StorageGetDataStoreZipDownloadUrl
from .storage_list_data_stores import StorageListDataStores
from .storage_update_data_store import StorageUpdateDataStore
from .storage_update_data_store_directory import StorageUpdateDataStoreDirectory
from .storage_update_data_store_file import StorageUpdateDataStoreFile
from .time_series_db_cancel_database_query import TimeSeriesDbCancelDatabaseQuery
from .time_series_db_create_database import TimeSeriesDbCreateDatabase
from .time_series_db_delete_database import TimeSeriesDbDeleteDatabase
from .time_series_db_generate_query_result_export_file import (
    TimeSeriesDbGenerateQueryResultExportFile,
)
from .time_series_db_get_database import TimeSeriesDbGetDatabase
from .time_series_db_list_all_asset_last_values import (
    TimeSeriesDbListAllAssetLastValues,
)
from .time_series_db_list_databases import TimeSeriesDbListDatabases
from .time_series_db_notify_time_series_query_export_complete import (
    TimeSeriesDbNotifyTimeSeriesQueryExportComplete,
)
from .time_series_db_publish_to_database import TimeSeriesDbPublishToDatabase
from .time_series_db_query_database import TimeSeriesDbQueryDatabase
from .time_series_db_query_database_with_timestream_query import (
    TimeSeriesDbQueryDatabaseWithTimestreamQuery,
)
from .time_series_db_update_database import TimeSeriesDbUpdateDatabase
from .user_create_authentication_token import UserCreateAuthenticationToken
from .user_delete_authentication_token import UserDeleteAuthenticationToken
from .user_get_user_session import UserGetUserSession
from .user_list_authentication_tokens import UserListAuthenticationTokens


def gql(q: str) -> str:
    return q


class Client(AsyncBaseClient):
    async def collaborative_update_collaborative_member_organization(
        self,
        collaborative_id: str,
        member_state: CollaborativeMemberOrganizationState,
        organization_id: str,
    ) -> CollaborativeUpdateCollaborativeMemberOrganization:
        query = gql(
            """
            mutation collaborative_updateCollaborativeMemberOrganization($collaborativeId: ID!, $memberState: CollaborativeMemberOrganizationState!, $organizationId: ID!) {
              collaborative_updateCollaborativeMemberOrganization(
                collaborativeId: $collaborativeId
                memberState: $memberState
                organizationId: $organizationId
              ) {
                accessApprovedByUserId
                collaborativeId
                memberState
                organization {
                  hostOrganization
                  name
                  organizationId
                }
                submittedByUser {
                  email
                  firstName
                  lastActive
                  lastName
                  mobile
                  organization {
                    hostOrganization
                    name
                    organizationId
                  }
                  userAccountState
                  userId
                  userRoles
                }
                submittedTimestamp
                usersInCollaborative {
                  permission
                  user {
                    email
                    firstName
                    lastActive
                    lastName
                    mobile
                    organization {
                      hostOrganization
                      name
                      organizationId
                    }
                    userAccountState
                    userId
                    userRoles
                  }
                }
              }
            }
            """
        )
        variables: dict[str, object] = {
            "collaborativeId": collaborative_id,
            "memberState": member_state,
            "organizationId": organization_id,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return CollaborativeUpdateCollaborativeMemberOrganization.parse_obj(data)

    async def collaborative_add_service_to_collaborative(
        self, collaborative_id: str, service_id: str, service_type: ServiceType
    ) -> CollaborativeAddServiceToCollaborative:
        query = gql(
            """
            mutation collaborative_addServiceToCollaborative($collaborativeId: ID!, $serviceId: ID!, $serviceType: ServiceType!) {
              collaborative_addServiceToCollaborative(
                collaborativeId: $collaborativeId
                serviceId: $serviceId
                serviceType: $serviceType
              ) {
                dataCapture {
                  captureId
                  captureType
                  dataModel {
                    dateCreated
                    dateUpdated
                    errors
                    items {
                      attributes {
                        attributeType
                        description
                        displayName
                        schemaType
                        unit
                        userDefinedId
                      }
                      description
                      displayName
                      userDefinedId
                    }
                    state
                    version
                  }
                  dateCreated
                  dateUpdated
                  description
                  displayName
                  ownerUserId
                  state
                  stateHistory {
                    dateCreated
                    message
                    newState
                  }
                  timeSettings {
                    actualStartTime
                    actualStopTime
                    errors
                    scheduledStartTime
                    scheduledStopTime
                    startTimeType
                    state
                    stopTimeType
                  }
                }
                dataStore {
                  dataStoreId
                  description
                  homeDirectoryId
                  name
                  ownerUserId
                }
                iotEndpointGroup {
                  description
                  endpoints {
                    description
                    iotEndpointId
                    iotHubId
                    modelId
                    name
                    ownerUserId
                    properties {
                      attributeType
                      defaultValue
                      description
                      name
                      schemaType
                      timestamp
                      value
                      writable
                    }
                    telemetry {
                      attributeType
                      description
                      index
                      name
                      schemaType
                    }
                  }
                  iotEndpointIds
                  iotGroupId
                  iotHubId
                  name
                  ownerUserId
                }
                ocsAdapter {
                  ocsAdapterId
                }
                serviceId
                serviceType
                timeSeriesDb {
                  databaseName
                  description
                  name
                  ownerUserId
                  tableName
                  timeSeriesDbId
                }
              }
            }
            """
        )
        variables: dict[str, object] = {
            "collaborativeId": collaborative_id,
            "serviceId": service_id,
            "serviceType": service_type,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return CollaborativeAddServiceToCollaborative.parse_obj(data)

    async def iot_create_hub(
        self, name: str, description: Union[Optional[str], UnsetType] = UNSET
    ) -> IotCreateHub:
        query = gql(
            """
            mutation iot_createHub($description: String, $name: String!) {
              iot_createHub(description: $description, name: $name) {
                description
                iotHubId
                name
                ownerUserId
              }
            }
            """
        )
        variables: dict[str, object] = {"description": description, "name": name}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return IotCreateHub.parse_obj(data)

    async def iot_generate_query_result_export(
        self,
        query_id: str,
        file_format: Union[Optional[ExportFileFormat], UnsetType] = UNSET,
    ) -> IotGenerateQueryResultExport:
        query = gql(
            """
            mutation iot_generateQueryResultExport($fileFormat: ExportFileFormat, $queryId: ID!) {
              iot_generateQueryResultExport(fileFormat: $fileFormat, queryId: $queryId) {
                fileFormat
                queryId
              }
            }
            """
        )
        variables: dict[str, object] = {"fileFormat": file_format, "queryId": query_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return IotGenerateQueryResultExport.parse_obj(data)

    async def storage_delete_data_store_file_data_view(
        self, data_store_file_id: str, data_view_id: str
    ) -> StorageDeleteDataStoreFileDataView:
        query = gql(
            """
            mutation storage_deleteDataStoreFileDataView($dataStoreFileId: ID!, $dataViewId: ID!) {
              storage_deleteDataStoreFileDataView(
                dataStoreFileId: $dataStoreFileId
                dataViewId: $dataViewId
              ) {
                contentType
                dataStoreDirectoryId
                dataStoreFileId
                dataStoreId
                dataViewIds
                description
                fileExtension
                lastModified
                name
                ownerUserId
                s3ConfirmedUpload
                storageSizeBytes
              }
            }
            """
        )
        variables: dict[str, object] = {
            "dataStoreFileId": data_store_file_id,
            "dataViewId": data_view_id,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return StorageDeleteDataStoreFileDataView.parse_obj(data)

    async def collaborative_remove_service_from_collaborative(
        self, collaborative_id: str, service_id: str, service_type: ServiceType
    ) -> CollaborativeRemoveServiceFromCollaborative:
        query = gql(
            """
            mutation collaborative_removeServiceFromCollaborative($collaborativeId: ID!, $serviceId: ID!, $serviceType: ServiceType!) {
              collaborative_removeServiceFromCollaborative(
                collaborativeId: $collaborativeId
                serviceId: $serviceId
                serviceType: $serviceType
              ) {
                dataCapture {
                  captureId
                  captureType
                  dataModel {
                    dateCreated
                    dateUpdated
                    errors
                    items {
                      attributes {
                        attributeType
                        description
                        displayName
                        schemaType
                        unit
                        userDefinedId
                      }
                      description
                      displayName
                      userDefinedId
                    }
                    state
                    version
                  }
                  dateCreated
                  dateUpdated
                  description
                  displayName
                  ownerUserId
                  state
                  stateHistory {
                    dateCreated
                    message
                    newState
                  }
                  timeSettings {
                    actualStartTime
                    actualStopTime
                    errors
                    scheduledStartTime
                    scheduledStopTime
                    startTimeType
                    state
                    stopTimeType
                  }
                }
                dataStore {
                  dataStoreId
                  description
                  homeDirectoryId
                  name
                  ownerUserId
                }
                iotEndpointGroup {
                  description
                  endpoints {
                    description
                    iotEndpointId
                    iotHubId
                    modelId
                    name
                    ownerUserId
                    properties {
                      attributeType
                      defaultValue
                      description
                      name
                      schemaType
                      timestamp
                      value
                      writable
                    }
                    telemetry {
                      attributeType
                      description
                      index
                      name
                      schemaType
                    }
                  }
                  iotEndpointIds
                  iotGroupId
                  iotHubId
                  name
                  ownerUserId
                }
                ocsAdapter {
                  ocsAdapterId
                }
                serviceId
                serviceType
                timeSeriesDb {
                  databaseName
                  description
                  name
                  ownerUserId
                  tableName
                  timeSeriesDbId
                }
              }
            }
            """
        )
        variables: dict[str, object] = {
            "collaborativeId": collaborative_id,
            "serviceId": service_id,
            "serviceType": service_type,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return CollaborativeRemoveServiceFromCollaborative.parse_obj(data)

    async def iot_update_hub(
        self,
        iot_hub_id: str,
        description: Union[Optional[str], UnsetType] = UNSET,
        name: Union[Optional[str], UnsetType] = UNSET,
    ) -> IotUpdateHub:
        query = gql(
            """
            mutation iot_updateHub($description: String, $iotHubId: ID!, $name: String) {
              iot_updateHub(description: $description, iotHubId: $iotHubId, name: $name) {
                description
                iotHubId
                name
                ownerUserId
              }
            }
            """
        )
        variables: dict[str, object] = {
            "description": description,
            "iotHubId": iot_hub_id,
            "name": name,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return IotUpdateHub.parse_obj(data)

    async def platform_admin_create_user(
        self,
        email: str,
        first_name: str,
        last_name: str,
        organization_id: str,
        mobile: Union[Optional[str], UnsetType] = UNSET,
        user_roles: Union[Optional[List[UserRole]], UnsetType] = UNSET,
    ) -> PlatformAdminCreateUser:
        query = gql(
            """
            mutation platformAdmin_createUser($email: String!, $firstName: String!, $lastName: String!, $mobile: String, $organizationId: ID!, $userRoles: [UserRole!]) {
              platformAdmin_createUser(
                email: $email
                firstName: $firstName
                lastName: $lastName
                mobile: $mobile
                organizationId: $organizationId
                userRoles: $userRoles
              ) {
                email
                firstName
                lastActive
                lastName
                mobile
                organization {
                  hostOrganization
                  name
                  organizationId
                }
                userAccountState
                userId
                userRoles
              }
            }
            """
        )
        variables: dict[str, object] = {
            "email": email,
            "firstName": first_name,
            "lastName": last_name,
            "mobile": mobile,
            "organizationId": organization_id,
            "userRoles": user_roles,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return PlatformAdminCreateUser.parse_obj(data)

    async def notifications_notify_upload_complete(
        self, upload_id: str
    ) -> NotificationsNotifyUploadComplete:
        query = gql(
            """
            mutation notifications_notifyUploadComplete($uploadId: ID!) {
              notifications_notifyUploadComplete(uploadId: $uploadId) {
                errorMessage
                httpStatusCode
                uploadId
              }
            }
            """
        )
        variables: dict[str, object] = {"uploadId": upload_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return NotificationsNotifyUploadComplete.parse_obj(data)

    async def iot_create_model(
        self,
        display_name: str,
        dtmi_segment: str,
        description: Union[Optional[str], UnsetType] = UNSET,
        properties: Union[
            Optional[List[Optional[ModelPropertyInput]]], UnsetType
        ] = UNSET,
        telemetry: Union[
            Optional[List[Optional[ModelTelemetryInput]]], UnsetType
        ] = UNSET,
    ) -> IotCreateModel:
        query = gql(
            """
            mutation iot_createModel($description: String, $displayName: String!, $dtmiSegment: String!, $properties: [ModelPropertyInput], $telemetry: [ModelTelemetryInput]) {
              iot_createModel(
                description: $description
                displayName: $displayName
                dtmiSegment: $dtmiSegment
                properties: $properties
                telemetry: $telemetry
              ) {
                description
                displayName
                dtmi
                modelId
                ownerUserId
                properties {
                  attributeType
                  defaultValue
                  description
                  index
                  name
                  schemaType
                  writable
                }
                telemetry {
                  attributeType
                  description
                  index
                  name
                  schemaType
                }
              }
            }
            """
        )
        variables: dict[str, object] = {
            "description": description,
            "displayName": display_name,
            "dtmiSegment": dtmi_segment,
            "properties": properties,
            "telemetry": telemetry,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return IotCreateModel.parse_obj(data)

    async def storage_update_data_store(
        self,
        data_store_id: str,
        description: Union[Optional[str], UnsetType] = UNSET,
        name: Union[Optional[str], UnsetType] = UNSET,
    ) -> StorageUpdateDataStore:
        query = gql(
            """
            mutation storage_updateDataStore($dataStoreId: ID!, $description: String, $name: String) {
              storage_updateDataStore(
                dataStoreId: $dataStoreId
                description: $description
                name: $name
              ) {
                dataStoreId
                description
                homeDirectoryId
                name
                ownerUserId
              }
            }
            """
        )
        variables: dict[str, object] = {
            "dataStoreId": data_store_id,
            "description": description,
            "name": name,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return StorageUpdateDataStore.parse_obj(data)

    async def iot_delete_hub(self, iot_hub_id: str) -> IotDeleteHub:
        query = gql(
            """
            mutation iot_deleteHub($iotHubId: ID!) {
              iot_deleteHub(iotHubId: $iotHubId) {
                description
                iotHubId
                name
                ownerUserId
              }
            }
            """
        )
        variables: dict[str, object] = {"iotHubId": iot_hub_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return IotDeleteHub.parse_obj(data)

    async def user_delete_authentication_token(
        self, token_id: str
    ) -> UserDeleteAuthenticationToken:
        query = gql(
            """
            mutation user_deleteAuthenticationToken($tokenId: ID!) {
              user_deleteAuthenticationToken(tokenId: $tokenId) {
                dateCreated
                dateExpires
                lastActive
                name
                scope
                tokenId
                tokenType
                tokenValue
                userId
              }
            }
            """
        )
        variables: dict[str, object] = {"tokenId": token_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return UserDeleteAuthenticationToken.parse_obj(data)

    async def iot_add_endpoints_to_group(
        self, iot_endpoint_ids: List[str], iot_group_id: str
    ) -> IotAddEndpointsToGroup:
        query = gql(
            """
            mutation iot_addEndpointsToGroup($iotEndpointIds: [ID]!, $iotGroupId: ID!) {
              iot_addEndpointsToGroup(
                iotEndpointIds: $iotEndpointIds
                iotGroupId: $iotGroupId
              ) {
                description
                endpoints {
                  description
                  iotEndpointId
                  iotHubId
                  modelId
                  name
                  ownerUserId
                  properties {
                    attributeType
                    defaultValue
                    description
                    name
                    schemaType
                    timestamp
                    value
                    writable
                  }
                  telemetry {
                    attributeType
                    description
                    index
                    name
                    schemaType
                  }
                }
                iotEndpointIds
                iotGroupId
                iotHubId
                name
                ownerUserId
              }
            }
            """
        )
        variables: dict[str, object] = {
            "iotEndpointIds": iot_endpoint_ids,
            "iotGroupId": iot_group_id,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return IotAddEndpointsToGroup.parse_obj(data)

    async def platform_admin_create_collaborative(
        self, name: str, description: Union[Optional[str], UnsetType] = UNSET
    ) -> PlatformAdminCreateCollaborative:
        query = gql(
            """
            mutation platformAdmin_createCollaborative($description: String, $name: String!) {
              platformAdmin_createCollaborative(description: $description, name: $name) {
                collaborativeId
                description
                hostOrganizationId
                memberOrganizations {
                  accessApprovedByUserId
                  collaborativeId
                  memberState
                  organization {
                    hostOrganization
                    name
                    organizationId
                  }
                  submittedByUser {
                    email
                    firstName
                    lastActive
                    lastName
                    mobile
                    organization {
                      hostOrganization
                      name
                      organizationId
                    }
                    userAccountState
                    userId
                    userRoles
                  }
                  submittedTimestamp
                  usersInCollaborative {
                    permission
                    user {
                      email
                      firstName
                      lastActive
                      lastName
                      mobile
                      organization {
                        hostOrganization
                        name
                        organizationId
                      }
                      userAccountState
                      userId
                      userRoles
                    }
                  }
                }
                name
              }
            }
            """
        )
        variables: dict[str, object] = {"description": description, "name": name}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return PlatformAdminCreateCollaborative.parse_obj(data)

    async def iot_update_endpoint(
        self,
        iot_endpoint_id: str,
        description: Union[Optional[str], UnsetType] = UNSET,
        name: Union[Optional[str], UnsetType] = UNSET,
    ) -> IotUpdateEndpoint:
        query = gql(
            """
            mutation iot_updateEndpoint($description: String, $iotEndpointId: ID!, $name: String) {
              iot_updateEndpoint(
                description: $description
                iotEndpointId: $iotEndpointId
                name: $name
              ) {
                description
                iotEndpointId
                iotHubId
                modelId
                name
                ownerUserId
                properties {
                  attributeType
                  defaultValue
                  description
                  name
                  schemaType
                  timestamp
                  value
                  writable
                }
                telemetry {
                  attributeType
                  description
                  index
                  name
                  schemaType
                }
              }
            }
            """
        )
        variables: dict[str, object] = {
            "description": description,
            "iotEndpointId": iot_endpoint_id,
            "name": name,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return IotUpdateEndpoint.parse_obj(data)

    async def storage_delete_data_store_file(
        self, data_store_file_id: str
    ) -> StorageDeleteDataStoreFile:
        query = gql(
            """
            mutation storage_deleteDataStoreFile($dataStoreFileId: ID!) {
              storage_deleteDataStoreFile(dataStoreFileId: $dataStoreFileId) {
                contentType
                dataStoreDirectoryId
                dataStoreFileId
                dataStoreId
                dataViewIds
                description
                fileExtension
                lastModified
                name
                ownerUserId
                s3ConfirmedUpload
                storageSizeBytes
              }
            }
            """
        )
        variables: dict[str, object] = {"dataStoreFileId": data_store_file_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return StorageDeleteDataStoreFile.parse_obj(data)

    async def iot_update_group(
        self,
        iot_group_id: str,
        description: Union[Optional[str], UnsetType] = UNSET,
        name: Union[Optional[str], UnsetType] = UNSET,
    ) -> IotUpdateGroup:
        query = gql(
            """
            mutation iot_updateGroup($description: String, $iotGroupId: ID!, $name: String) {
              iot_updateGroup(description: $description, iotGroupId: $iotGroupId, name: $name) {
                description
                endpoints {
                  description
                  iotEndpointId
                  iotHubId
                  modelId
                  name
                  ownerUserId
                  properties {
                    attributeType
                    defaultValue
                    description
                    name
                    schemaType
                    timestamp
                    value
                    writable
                  }
                  telemetry {
                    attributeType
                    description
                    index
                    name
                    schemaType
                  }
                }
                iotEndpointIds
                iotGroupId
                iotHubId
                name
                ownerUserId
              }
            }
            """
        )
        variables: dict[str, object] = {
            "description": description,
            "iotGroupId": iot_group_id,
            "name": name,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return IotUpdateGroup.parse_obj(data)

    async def iot_delete_model(self, model_id: str) -> IotDeleteModel:
        query = gql(
            """
            mutation iot_deleteModel($modelId: ID!) {
              iot_deleteModel(modelId: $modelId) {
                description
                displayName
                dtmi
                modelId
                ownerUserId
                properties {
                  attributeType
                  defaultValue
                  description
                  index
                  name
                  schemaType
                  writable
                }
                telemetry {
                  attributeType
                  description
                  index
                  name
                  schemaType
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"modelId": model_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return IotDeleteModel.parse_obj(data)

    async def storage_create_data_store_file_data_view(
        self, data_store_file_id: str
    ) -> StorageCreateDataStoreFileDataView:
        query = gql(
            """
            mutation storage_createDataStoreFileDataView($dataStoreFileId: ID!) {
              storage_createDataStoreFileDataView(dataStoreFileId: $dataStoreFileId) {
                contentType
                dataStoreDirectoryId
                dataStoreFileId
                dataStoreId
                dataViewIds
                description
                fileExtension
                lastModified
                name
                ownerUserId
                s3ConfirmedUpload
                storageSizeBytes
              }
            }
            """
        )
        variables: dict[str, object] = {"dataStoreFileId": data_store_file_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return StorageCreateDataStoreFileDataView.parse_obj(data)

    async def storage_create_data_store(
        self, name: str, description: Union[Optional[str], UnsetType] = UNSET
    ) -> StorageCreateDataStore:
        query = gql(
            """
            mutation storage_createDataStore($description: String, $name: String!) {
              storage_createDataStore(description: $description, name: $name) {
                dataStoreId
                description
                homeDirectoryId
                name
                ownerUserId
              }
            }
            """
        )
        variables: dict[str, object] = {"description": description, "name": name}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return StorageCreateDataStore.parse_obj(data)

    async def platform_admin_migrate_users_services_ownership(
        self, current_owner_user_id: str, transfer_to_user_id: str
    ) -> PlatformAdminMigrateUsersServicesOwnership:
        query = gql(
            """
            mutation platformAdmin_migrateUsersServicesOwnership($currentOwnerUserId: ID!, $transferToUserId: ID!) {
              platformAdmin_migrateUsersServicesOwnership(
                currentOwnerUserId: $currentOwnerUserId
                transferToUserId: $transferToUserId
              ) {
                dataCapture {
                  captureId
                  captureType
                  dataModel {
                    dateCreated
                    dateUpdated
                    errors
                    items {
                      attributes {
                        attributeType
                        description
                        displayName
                        schemaType
                        unit
                        userDefinedId
                      }
                      description
                      displayName
                      userDefinedId
                    }
                    state
                    version
                  }
                  dateCreated
                  dateUpdated
                  description
                  displayName
                  ownerUserId
                  state
                  stateHistory {
                    dateCreated
                    message
                    newState
                  }
                  timeSettings {
                    actualStartTime
                    actualStopTime
                    errors
                    scheduledStartTime
                    scheduledStopTime
                    startTimeType
                    state
                    stopTimeType
                  }
                }
                dataStore {
                  dataStoreId
                  description
                  homeDirectoryId
                  name
                  ownerUserId
                }
                iotEndpointGroup {
                  description
                  endpoints {
                    description
                    iotEndpointId
                    iotHubId
                    modelId
                    name
                    ownerUserId
                    properties {
                      attributeType
                      defaultValue
                      description
                      name
                      schemaType
                      timestamp
                      value
                      writable
                    }
                    telemetry {
                      attributeType
                      description
                      index
                      name
                      schemaType
                    }
                  }
                  iotEndpointIds
                  iotGroupId
                  iotHubId
                  name
                  ownerUserId
                }
                ocsAdapter {
                  ocsAdapterId
                }
                serviceId
                serviceType
                timeSeriesDb {
                  databaseName
                  description
                  name
                  ownerUserId
                  tableName
                  timeSeriesDbId
                }
              }
            }
            """
        )
        variables: dict[str, object] = {
            "currentOwnerUserId": current_owner_user_id,
            "transferToUserId": transfer_to_user_id,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return PlatformAdminMigrateUsersServicesOwnership.parse_obj(data)

    async def data_capture_regenerate_authentication_token(
        self, capture_id: str
    ) -> DataCaptureRegenerateAuthenticationToken:
        query = gql(
            """
            mutation dataCapture_regenerateAuthenticationToken($captureId: ID!) {
              dataCapture_regenerateAuthenticationToken(captureId: $captureId) {
                dateCreated
                dateExpires
                lastActive
                name
                scope
                tokenId
                tokenType
                tokenValue
                userId
              }
            }
            """
        )
        variables: dict[str, object] = {"captureId": capture_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return DataCaptureRegenerateAuthenticationToken.parse_obj(data)

    async def platform_admin_migrate_users_collaboratives_ownership(
        self, current_owner_user_id: str, transfer_to_user_id: str
    ) -> PlatformAdminMigrateUsersCollaborativesOwnership:
        query = gql(
            """
            mutation platformAdmin_migrateUsersCollaborativesOwnership($currentOwnerUserId: ID!, $transferToUserId: ID!) {
              platformAdmin_migrateUsersCollaborativesOwnership(
                currentOwnerUserId: $currentOwnerUserId
                transferToUserId: $transferToUserId
              ) {
                collaborativeId
                description
                hostOrganizationId
                memberOrganizations {
                  accessApprovedByUserId
                  collaborativeId
                  memberState
                  organization {
                    hostOrganization
                    name
                    organizationId
                  }
                  submittedByUser {
                    email
                    firstName
                    lastActive
                    lastName
                    mobile
                    organization {
                      hostOrganization
                      name
                      organizationId
                    }
                    userAccountState
                    userId
                    userRoles
                  }
                  submittedTimestamp
                  usersInCollaborative {
                    permission
                    user {
                      email
                      firstName
                      lastActive
                      lastName
                      mobile
                      organization {
                        hostOrganization
                        name
                        organizationId
                      }
                      userAccountState
                      userId
                      userRoles
                    }
                  }
                }
                name
              }
            }
            """
        )
        variables: dict[str, object] = {
            "currentOwnerUserId": current_owner_user_id,
            "transferToUserId": transfer_to_user_id,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return PlatformAdminMigrateUsersCollaborativesOwnership.parse_obj(data)

    async def iot_regenerate_endpoint_token(
        self, iot_endpoint_id: str
    ) -> IotRegenerateEndpointToken:
        query = gql(
            """
            mutation iot_regenerateEndpointToken($iotEndpointId: ID!) {
              iot_regenerateEndpointToken(iotEndpointId: $iotEndpointId) {
                dateCreated
                dateExpires
                lastActive
                name
                scope
                tokenId
                tokenType
                tokenValue
                userId
              }
            }
            """
        )
        variables: dict[str, object] = {"iotEndpointId": iot_endpoint_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return IotRegenerateEndpointToken.parse_obj(data)

    async def time_series_db_publish_to_database(
        self, asset_id: str, data: TimeSeriesDbDataInput, time_series_db_id: str
    ) -> TimeSeriesDbPublishToDatabase:
        query = gql(
            """
            mutation timeSeriesDb_publishToDatabase($assetId: ID!, $data: TimeSeriesDbDataInput!, $timeSeriesDbId: ID!) {
              timeSeriesDb_publishToDatabase(
                assetId: $assetId
                data: $data
                timeSeriesDbId: $timeSeriesDbId
              ) {
                assetId
                attributes {
                  attributeType
                  data {
                    timestamp
                    value
                  }
                  lastValue
                  lastValueTime
                  name
                }
                name
              }
            }
            """
        )
        variables: dict[str, object] = {
            "assetId": asset_id,
            "data": data,
            "timeSeriesDbId": time_series_db_id,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return TimeSeriesDbPublishToDatabase.parse_obj(data)

    async def platform_admin_update_collaborative_member(
        self,
        collaborative_id: str,
        permission: CollaborativeMemberPermission,
        user_id: str,
    ) -> PlatformAdminUpdateCollaborativeMember:
        query = gql(
            """
            mutation platformAdmin_updateCollaborativeMember($collaborativeId: ID!, $permission: CollaborativeMemberPermission!, $userId: ID!) {
              platformAdmin_updateCollaborativeMember(
                collaborativeId: $collaborativeId
                permission: $permission
                userId: $userId
              ) {
                collaborativeId
                description
                hostOrganizationId
                memberOrganizations {
                  accessApprovedByUserId
                  collaborativeId
                  memberState
                  organization {
                    hostOrganization
                    name
                    organizationId
                  }
                  submittedByUser {
                    email
                    firstName
                    lastActive
                    lastName
                    mobile
                    organization {
                      hostOrganization
                      name
                      organizationId
                    }
                    userAccountState
                    userId
                    userRoles
                  }
                  submittedTimestamp
                  usersInCollaborative {
                    permission
                    user {
                      email
                      firstName
                      lastActive
                      lastName
                      mobile
                      organization {
                        hostOrganization
                        name
                        organizationId
                      }
                      userAccountState
                      userId
                      userRoles
                    }
                  }
                }
                name
              }
            }
            """
        )
        variables: dict[str, object] = {
            "collaborativeId": collaborative_id,
            "permission": permission,
            "userId": user_id,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return PlatformAdminUpdateCollaborativeMember.parse_obj(data)

    async def time_series_db_generate_query_result_export_file(
        self,
        query_id: str,
        time_series_db_id: str,
        file_format: Union[Optional[TimeSeriesQueryOutputFileType], UnsetType] = UNSET,
    ) -> TimeSeriesDbGenerateQueryResultExportFile:
        query = gql(
            """
            mutation timeSeriesDb_generateQueryResultExportFile($fileFormat: TimeSeriesQueryOutputFileType, $queryId: String!, $timeSeriesDbId: ID!) {
              timeSeriesDb_generateQueryResultExportFile(
                fileFormat: $fileFormat
                queryId: $queryId
                timeSeriesDbId: $timeSeriesDbId
              ) {
                fileFormat
                queryId
                timeSeriesDbId
              }
            }
            """
        )
        variables: dict[str, object] = {
            "fileFormat": file_format,
            "queryId": query_id,
            "timeSeriesDbId": time_series_db_id,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return TimeSeriesDbGenerateQueryResultExportFile.parse_obj(data)

    async def user_create_authentication_token(
        self, days_before_expiration: int, name: str
    ) -> UserCreateAuthenticationToken:
        query = gql(
            """
            mutation user_createAuthenticationToken($daysBeforeExpiration: Int!, $name: String!) {
              user_createAuthenticationToken(
                daysBeforeExpiration: $daysBeforeExpiration
                name: $name
              ) {
                dateCreated
                dateExpires
                lastActive
                name
                scope
                tokenId
                tokenType
                tokenValue
                userId
              }
            }
            """
        )
        variables: dict[str, object] = {
            "daysBeforeExpiration": days_before_expiration,
            "name": name,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return UserCreateAuthenticationToken.parse_obj(data)

    async def iot_publish(
        self, data: List[IotDataRecordInput], iot_endpoint_id: str
    ) -> IotPublish:
        query = gql(
            """
            mutation iot_publish($data: [IotDataRecordInput]!, $iotEndpointId: ID!) {
              iot_publish(data: $data, iotEndpointId: $iotEndpointId) {
                failedRecords {
                  errors {
                    errorMessage
                    errorType
                  }
                  record {
                    attributes {
                      name
                      schemaType
                      value
                    }
                    iotEndpointId
                    timestamp
                  }
                }
                recordsWritten {
                  attributes {
                    name
                    schemaType
                    value
                  }
                  iotEndpointId
                  timestamp
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"data": data, "iotEndpointId": iot_endpoint_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return IotPublish.parse_obj(data)

    async def data_capture_notify_capture_complete(
        self, capture_id: str
    ) -> DataCaptureNotifyCaptureComplete:
        query = gql(
            """
            mutation dataCapture_notifyCaptureComplete($captureId: ID!) {
              dataCapture_notifyCaptureComplete(captureId: $captureId) {
                captureId
                captureType
                dataModel {
                  dateCreated
                  dateUpdated
                  errors
                  items {
                    attributes {
                      attributeType
                      description
                      displayName
                      schemaType
                      unit
                      userDefinedId
                    }
                    description
                    displayName
                    userDefinedId
                  }
                  state
                  version
                }
                dateCreated
                dateUpdated
                description
                displayName
                ownerUserId
                state
                stateHistory {
                  dateCreated
                  message
                  newState
                }
                timeSettings {
                  actualStartTime
                  actualStopTime
                  errors
                  scheduledStartTime
                  scheduledStopTime
                  startTimeType
                  state
                  stopTimeType
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"captureId": capture_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return DataCaptureNotifyCaptureComplete.parse_obj(data)

    async def iot_create_endpoint(
        self,
        iot_hub_id: str,
        model_id: str,
        name: str,
        description: Union[Optional[str], UnsetType] = UNSET,
    ) -> IotCreateEndpoint:
        query = gql(
            """
            mutation iot_createEndpoint($description: String, $iotHubId: ID!, $modelId: ID!, $name: String!) {
              iot_createEndpoint(
                description: $description
                iotHubId: $iotHubId
                modelId: $modelId
                name: $name
              ) {
                description
                iotEndpointId
                iotHubId
                modelId
                name
                ownerUserId
                properties {
                  attributeType
                  defaultValue
                  description
                  name
                  schemaType
                  timestamp
                  value
                  writable
                }
                telemetry {
                  attributeType
                  description
                  index
                  name
                  schemaType
                }
              }
            }
            """
        )
        variables: dict[str, object] = {
            "description": description,
            "iotHubId": iot_hub_id,
            "modelId": model_id,
            "name": name,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return IotCreateEndpoint.parse_obj(data)

    async def iot_update_endpoint_properties(
        self, iot_endpoint_id: str, properties: List[EndpointPropertyInput]
    ) -> IotUpdateEndpointProperties:
        query = gql(
            """
            mutation iot_updateEndpointProperties($iotEndpointId: ID!, $properties: [EndpointPropertyInput]!) {
              iot_updateEndpointProperties(
                iotEndpointId: $iotEndpointId
                properties: $properties
              ) {
                description
                iotEndpointId
                iotHubId
                modelId
                name
                ownerUserId
                properties {
                  attributeType
                  defaultValue
                  description
                  name
                  schemaType
                  timestamp
                  value
                  writable
                }
                telemetry {
                  attributeType
                  description
                  index
                  name
                  schemaType
                }
              }
            }
            """
        )
        variables: dict[str, object] = {
            "iotEndpointId": iot_endpoint_id,
            "properties": properties,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return IotUpdateEndpointProperties.parse_obj(data)

    async def iot_create_group(
        self,
        iot_hub_id: str,
        name: str,
        description: Union[Optional[str], UnsetType] = UNSET,
        iot_endpoint_ids: Union[Optional[List[Optional[str]]], UnsetType] = UNSET,
    ) -> IotCreateGroup:
        query = gql(
            """
            mutation iot_createGroup($description: String, $iotEndpointIds: [ID], $iotHubId: ID!, $name: String!) {
              iot_createGroup(
                description: $description
                iotEndpointIds: $iotEndpointIds
                iotHubId: $iotHubId
                name: $name
              ) {
                description
                endpoints {
                  description
                  iotEndpointId
                  iotHubId
                  modelId
                  name
                  ownerUserId
                  properties {
                    attributeType
                    defaultValue
                    description
                    name
                    schemaType
                    timestamp
                    value
                    writable
                  }
                  telemetry {
                    attributeType
                    description
                    index
                    name
                    schemaType
                  }
                }
                iotEndpointIds
                iotGroupId
                iotHubId
                name
                ownerUserId
              }
            }
            """
        )
        variables: dict[str, object] = {
            "description": description,
            "iotEndpointIds": iot_endpoint_ids,
            "iotHubId": iot_hub_id,
            "name": name,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return IotCreateGroup.parse_obj(data)

    async def platform_admin_resend_user_invitation(
        self, user_id: str
    ) -> PlatformAdminResendUserInvitation:
        query = gql(
            """
            mutation platformAdmin_resendUserInvitation($userId: ID!) {
              platformAdmin_resendUserInvitation(userId: $userId) {
                email
                firstName
                lastActive
                lastName
                mobile
                organization {
                  hostOrganization
                  name
                  organizationId
                }
                userAccountState
                userId
                userRoles
              }
            }
            """
        )
        variables: dict[str, object] = {"userId": user_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return PlatformAdminResendUserInvitation.parse_obj(data)

    async def data_capture_handle_completion(
        self, capture_id: str
    ) -> DataCaptureHandleCompletion:
        query = gql(
            """
            mutation dataCapture_handleCompletion($captureId: ID!) {
              dataCapture_handleCompletion(captureId: $captureId) {
                captureId
                captureType
                dataModel {
                  dateCreated
                  dateUpdated
                  errors
                  items {
                    attributes {
                      attributeType
                      description
                      displayName
                      schemaType
                      unit
                      userDefinedId
                    }
                    description
                    displayName
                    userDefinedId
                  }
                  state
                  version
                }
                dateCreated
                dateUpdated
                description
                displayName
                ownerUserId
                state
                stateHistory {
                  dateCreated
                  message
                  newState
                }
                timeSettings {
                  actualStartTime
                  actualStopTime
                  errors
                  scheduledStartTime
                  scheduledStopTime
                  startTimeType
                  state
                  stopTimeType
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"captureId": capture_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return DataCaptureHandleCompletion.parse_obj(data)

    async def iot_delete_endpoint(self, iot_endpoint_id: str) -> IotDeleteEndpoint:
        query = gql(
            """
            mutation iot_deleteEndpoint($iotEndpointId: ID!) {
              iot_deleteEndpoint(iotEndpointId: $iotEndpointId) {
                description
                iotEndpointId
                iotHubId
                modelId
                name
                ownerUserId
                properties {
                  attributeType
                  defaultValue
                  description
                  name
                  schemaType
                  timestamp
                  value
                  writable
                }
                telemetry {
                  attributeType
                  description
                  index
                  name
                  schemaType
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"iotEndpointId": iot_endpoint_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return IotDeleteEndpoint.parse_obj(data)

    async def data_capture_stop_capture(
        self, capture_id: str
    ) -> DataCaptureStopCapture:
        query = gql(
            """
            mutation dataCapture_stopCapture($captureId: ID!) {
              dataCapture_stopCapture(captureId: $captureId) {
                captureId
                captureType
                dataModel {
                  dateCreated
                  dateUpdated
                  errors
                  items {
                    attributes {
                      attributeType
                      description
                      displayName
                      schemaType
                      unit
                      userDefinedId
                    }
                    description
                    displayName
                    userDefinedId
                  }
                  state
                  version
                }
                dateCreated
                dateUpdated
                description
                displayName
                ownerUserId
                state
                stateHistory {
                  dateCreated
                  message
                  newState
                }
                timeSettings {
                  actualStartTime
                  actualStopTime
                  errors
                  scheduledStartTime
                  scheduledStopTime
                  startTimeType
                  state
                  stopTimeType
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"captureId": capture_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return DataCaptureStopCapture.parse_obj(data)

    async def platform_admin_update_collaborative(
        self,
        collaborative_id: str,
        description: Union[Optional[str], UnsetType] = UNSET,
        name: Union[Optional[str], UnsetType] = UNSET,
    ) -> PlatformAdminUpdateCollaborative:
        query = gql(
            """
            mutation platformAdmin_updateCollaborative($collaborativeId: ID!, $description: String, $name: String) {
              platformAdmin_updateCollaborative(
                collaborativeId: $collaborativeId
                description: $description
                name: $name
              ) {
                collaborativeId
                description
                hostOrganizationId
                memberOrganizations {
                  accessApprovedByUserId
                  collaborativeId
                  memberState
                  organization {
                    hostOrganization
                    name
                    organizationId
                  }
                  submittedByUser {
                    email
                    firstName
                    lastActive
                    lastName
                    mobile
                    organization {
                      hostOrganization
                      name
                      organizationId
                    }
                    userAccountState
                    userId
                    userRoles
                  }
                  submittedTimestamp
                  usersInCollaborative {
                    permission
                    user {
                      email
                      firstName
                      lastActive
                      lastName
                      mobile
                      organization {
                        hostOrganization
                        name
                        organizationId
                      }
                      userAccountState
                      userId
                      userRoles
                    }
                  }
                }
                name
              }
            }
            """
        )
        variables: dict[str, object] = {
            "collaborativeId": collaborative_id,
            "description": description,
            "name": name,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return PlatformAdminUpdateCollaborative.parse_obj(data)

    async def platform_admin_delete_users_services(
        self, user_id: str
    ) -> PlatformAdminDeleteUsersServices:
        query = gql(
            """
            mutation platformAdmin_deleteUsersServices($userId: ID!) {
              platformAdmin_deleteUsersServices(userId: $userId) {
                dataCapture {
                  captureId
                  captureType
                  dataModel {
                    dateCreated
                    dateUpdated
                    errors
                    items {
                      attributes {
                        attributeType
                        description
                        displayName
                        schemaType
                        unit
                        userDefinedId
                      }
                      description
                      displayName
                      userDefinedId
                    }
                    state
                    version
                  }
                  dateCreated
                  dateUpdated
                  description
                  displayName
                  ownerUserId
                  state
                  stateHistory {
                    dateCreated
                    message
                    newState
                  }
                  timeSettings {
                    actualStartTime
                    actualStopTime
                    errors
                    scheduledStartTime
                    scheduledStopTime
                    startTimeType
                    state
                    stopTimeType
                  }
                }
                dataStore {
                  dataStoreId
                  description
                  homeDirectoryId
                  name
                  ownerUserId
                }
                iotEndpointGroup {
                  description
                  endpoints {
                    description
                    iotEndpointId
                    iotHubId
                    modelId
                    name
                    ownerUserId
                    properties {
                      attributeType
                      defaultValue
                      description
                      name
                      schemaType
                      timestamp
                      value
                      writable
                    }
                    telemetry {
                      attributeType
                      description
                      index
                      name
                      schemaType
                    }
                  }
                  iotEndpointIds
                  iotGroupId
                  iotHubId
                  name
                  ownerUserId
                }
                ocsAdapter {
                  ocsAdapterId
                }
                serviceId
                serviceType
                timeSeriesDb {
                  databaseName
                  description
                  name
                  ownerUserId
                  tableName
                  timeSeriesDbId
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"userId": user_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return PlatformAdminDeleteUsersServices.parse_obj(data)

    async def time_series_db_cancel_database_query(
        self, query_id: str, time_series_db_id: str
    ) -> TimeSeriesDbCancelDatabaseQuery:
        query = gql(
            """
            mutation timeSeriesDb_cancelDatabaseQuery($queryId: String!, $timeSeriesDbId: ID!) {
              timeSeriesDb_cancelDatabaseQuery(
                queryId: $queryId
                timeSeriesDbId: $timeSeriesDbId
              ) {
                errorMessage
                httpStatusCode
              }
            }
            """
        )
        variables: dict[str, object] = {
            "queryId": query_id,
            "timeSeriesDbId": time_series_db_id,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return TimeSeriesDbCancelDatabaseQuery.parse_obj(data)

    async def storage_delete_data_store_directory(
        self, data_store_directory_id: str
    ) -> StorageDeleteDataStoreDirectory:
        query = gql(
            """
            mutation storage_deleteDataStoreDirectory($dataStoreDirectoryId: ID!) {
              storage_deleteDataStoreDirectory(dataStoreDirectoryId: $dataStoreDirectoryId) {
                contents {
                  dataStoreDirectory {
                    contents {
                      dataStoreFile {
                        contentType
                        dataStoreDirectoryId
                        dataStoreFileId
                        dataStoreId
                        dataViewIds
                        description
                        fileExtension
                        lastModified
                        name
                        ownerUserId
                        s3ConfirmedUpload
                        storageSizeBytes
                      }
                      objectType
                    }
                    dataStoreDirectoryId
                    dataStoreId
                    homeDirectory
                    name
                    ownerUserId
                    parentDirectoryId
                  }
                  objectType
                }
                dataStoreDirectoryId
                dataStoreId
                homeDirectory
                name
                ownerUserId
                parentDirectoryId
              }
            }
            """
        )
        variables: dict[str, object] = {"dataStoreDirectoryId": data_store_directory_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return StorageDeleteDataStoreDirectory.parse_obj(data)

    async def iot_delete_group(self, iot_group_id: str) -> IotDeleteGroup:
        query = gql(
            """
            mutation iot_deleteGroup($iotGroupId: ID!) {
              iot_deleteGroup(iotGroupId: $iotGroupId) {
                description
                endpoints {
                  description
                  iotEndpointId
                  iotHubId
                  modelId
                  name
                  ownerUserId
                  properties {
                    attributeType
                    defaultValue
                    description
                    name
                    schemaType
                    timestamp
                    value
                    writable
                  }
                  telemetry {
                    attributeType
                    description
                    index
                    name
                    schemaType
                  }
                }
                iotEndpointIds
                iotGroupId
                iotHubId
                name
                ownerUserId
              }
            }
            """
        )
        variables: dict[str, object] = {"iotGroupId": iot_group_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return IotDeleteGroup.parse_obj(data)

    async def data_capture_start_capture(
        self, capture_id: str
    ) -> DataCaptureStartCapture:
        query = gql(
            """
            mutation dataCapture_startCapture($captureId: ID!) {
              dataCapture_startCapture(captureId: $captureId) {
                captureId
                captureType
                dataModel {
                  dateCreated
                  dateUpdated
                  errors
                  items {
                    attributes {
                      attributeType
                      description
                      displayName
                      schemaType
                      unit
                      userDefinedId
                    }
                    description
                    displayName
                    userDefinedId
                  }
                  state
                  version
                }
                dateCreated
                dateUpdated
                description
                displayName
                ownerUserId
                state
                stateHistory {
                  dateCreated
                  message
                  newState
                }
                timeSettings {
                  actualStartTime
                  actualStopTime
                  errors
                  scheduledStartTime
                  scheduledStopTime
                  startTimeType
                  state
                  stopTimeType
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"captureId": capture_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return DataCaptureStartCapture.parse_obj(data)

    async def iot_cancel_query(self, query_id: str) -> IotCancelQuery:
        query = gql(
            """
            mutation iot_cancelQuery($queryId: ID!) {
              iot_cancelQuery(queryId: $queryId) {
                errorMessage
                httpStatusCode
              }
            }
            """
        )
        variables: dict[str, object] = {"queryId": query_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return IotCancelQuery.parse_obj(data)

    async def iot_update_model(
        self,
        model_id: str,
        description: Union[Optional[str], UnsetType] = UNSET,
        display_name: Union[Optional[str], UnsetType] = UNSET,
        dtmi_segment: Union[Optional[str], UnsetType] = UNSET,
    ) -> IotUpdateModel:
        query = gql(
            """
            mutation iot_updateModel($description: String, $displayName: String, $dtmiSegment: String, $modelId: ID!) {
              iot_updateModel(
                description: $description
                displayName: $displayName
                dtmiSegment: $dtmiSegment
                modelId: $modelId
              ) {
                description
                displayName
                dtmi
                modelId
                ownerUserId
                properties {
                  attributeType
                  defaultValue
                  description
                  index
                  name
                  schemaType
                  writable
                }
                telemetry {
                  attributeType
                  description
                  index
                  name
                  schemaType
                }
              }
            }
            """
        )
        variables: dict[str, object] = {
            "description": description,
            "displayName": display_name,
            "dtmiSegment": dtmi_segment,
            "modelId": model_id,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return IotUpdateModel.parse_obj(data)

    async def time_series_db_create_database(
        self, name: str, description: Union[Optional[str], UnsetType] = UNSET
    ) -> TimeSeriesDbCreateDatabase:
        query = gql(
            """
            mutation timeSeriesDb_createDatabase($description: String, $name: String!) {
              timeSeriesDb_createDatabase(description: $description, name: $name) {
                databaseName
                description
                name
                ownerUserId
                tableName
                timeSeriesDbId
              }
            }
            """
        )
        variables: dict[str, object] = {"description": description, "name": name}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return TimeSeriesDbCreateDatabase.parse_obj(data)

    async def iot_notify_query_export_complete(
        self,
        query_id: str,
        file_format: Union[Optional[ExportFileFormat], UnsetType] = UNSET,
    ) -> IotNotifyQueryExportComplete:
        query = gql(
            """
            mutation iot_notifyQueryExportComplete($fileFormat: ExportFileFormat, $queryId: String!) {
              iot_notifyQueryExportComplete(fileFormat: $fileFormat, queryId: $queryId) {
                fileFormat
                fileSizeBytes
                queryId
                url
              }
            }
            """
        )
        variables: dict[str, object] = {"fileFormat": file_format, "queryId": query_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return IotNotifyQueryExportComplete.parse_obj(data)

    async def time_series_db_delete_database(
        self, time_series_db_id: str
    ) -> TimeSeriesDbDeleteDatabase:
        query = gql(
            """
            mutation timeSeriesDb_deleteDatabase($timeSeriesDbId: ID!) {
              timeSeriesDb_deleteDatabase(timeSeriesDbId: $timeSeriesDbId) {
                databaseName
                description
                name
                ownerUserId
                tableName
                timeSeriesDbId
              }
            }
            """
        )
        variables: dict[str, object] = {"timeSeriesDbId": time_series_db_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return TimeSeriesDbDeleteDatabase.parse_obj(data)

    async def storage_create_data_store_directory(
        self, data_store_id: str, name: str, parent_directory_id: str
    ) -> StorageCreateDataStoreDirectory:
        query = gql(
            """
            mutation storage_createDataStoreDirectory($dataStoreId: ID!, $name: String!, $parentDirectoryId: ID!) {
              storage_createDataStoreDirectory(
                dataStoreId: $dataStoreId
                name: $name
                parentDirectoryId: $parentDirectoryId
              ) {
                contents {
                  dataStoreDirectory {
                    contents {
                      dataStoreFile {
                        contentType
                        dataStoreDirectoryId
                        dataStoreFileId
                        dataStoreId
                        dataViewIds
                        description
                        fileExtension
                        lastModified
                        name
                        ownerUserId
                        s3ConfirmedUpload
                        storageSizeBytes
                      }
                      objectType
                    }
                    dataStoreDirectoryId
                    dataStoreId
                    homeDirectory
                    name
                    ownerUserId
                    parentDirectoryId
                  }
                  objectType
                }
                dataStoreDirectoryId
                dataStoreId
                homeDirectory
                name
                ownerUserId
                parentDirectoryId
              }
            }
            """
        )
        variables: dict[str, object] = {
            "dataStoreId": data_store_id,
            "name": name,
            "parentDirectoryId": parent_directory_id,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return StorageCreateDataStoreDirectory.parse_obj(data)

    async def platform_admin_delete_user(self, user_id: str) -> PlatformAdminDeleteUser:
        query = gql(
            """
            mutation platformAdmin_deleteUser($userId: ID!) {
              platformAdmin_deleteUser(userId: $userId) {
                email
                firstName
                lastActive
                lastName
                mobile
                organization {
                  hostOrganization
                  name
                  organizationId
                }
                userAccountState
                userId
                userRoles
              }
            }
            """
        )
        variables: dict[str, object] = {"userId": user_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return PlatformAdminDeleteUser.parse_obj(data)

    async def storage_delete_data_store(
        self, data_store_id: str
    ) -> StorageDeleteDataStore:
        query = gql(
            """
            mutation storage_deleteDataStore($dataStoreId: ID!) {
              storage_deleteDataStore(dataStoreId: $dataStoreId) {
                dataStoreId
                description
                homeDirectoryId
                name
                ownerUserId
              }
            }
            """
        )
        variables: dict[str, object] = {"dataStoreId": data_store_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return StorageDeleteDataStore.parse_obj(data)

    async def time_series_db_notify_time_series_query_export_complete(
        self,
        query_id: str,
        file_format: Union[Optional[TimeSeriesQueryOutputFileType], UnsetType] = UNSET,
    ) -> TimeSeriesDbNotifyTimeSeriesQueryExportComplete:
        query = gql(
            """
            mutation timeSeriesDb_notifyTimeSeriesQueryExportComplete($fileFormat: TimeSeriesQueryOutputFileType, $queryId: String!) {
              timeSeriesDb_notifyTimeSeriesQueryExportComplete(
                fileFormat: $fileFormat
                queryId: $queryId
              ) {
                fileSizeBytes
                fileType
                queryId
                url
              }
            }
            """
        )
        variables: dict[str, object] = {"fileFormat": file_format, "queryId": query_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return TimeSeriesDbNotifyTimeSeriesQueryExportComplete.parse_obj(data)

    async def platform_admin_delete_users_collaboratives(
        self, user_id: str
    ) -> PlatformAdminDeleteUsersCollaboratives:
        query = gql(
            """
            mutation platformAdmin_deleteUsersCollaboratives($userId: ID!) {
              platformAdmin_deleteUsersCollaboratives(userId: $userId) {
                collaborativeId
                description
                hostOrganizationId
                memberOrganizations {
                  accessApprovedByUserId
                  collaborativeId
                  memberState
                  organization {
                    hostOrganization
                    name
                    organizationId
                  }
                  submittedByUser {
                    email
                    firstName
                    lastActive
                    lastName
                    mobile
                    organization {
                      hostOrganization
                      name
                      organizationId
                    }
                    userAccountState
                    userId
                    userRoles
                  }
                  submittedTimestamp
                  usersInCollaborative {
                    permission
                    user {
                      email
                      firstName
                      lastActive
                      lastName
                      mobile
                      organization {
                        hostOrganization
                        name
                        organizationId
                      }
                      userAccountState
                      userId
                      userRoles
                    }
                  }
                }
                name
              }
            }
            """
        )
        variables: dict[str, object] = {"userId": user_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return PlatformAdminDeleteUsersCollaboratives.parse_obj(data)

    async def iot_update_model_used_by_endpoint(
        self, iot_endpoint_id: str, model_id: str
    ) -> IotUpdateModelUsedByEndpoint:
        query = gql(
            """
            mutation iot_updateModelUsedByEndpoint($iotEndpointId: ID!, $modelId: ID!) {
              iot_updateModelUsedByEndpoint(iotEndpointId: $iotEndpointId, modelId: $modelId) {
                description
                iotEndpointId
                iotHubId
                modelId
                name
                ownerUserId
                properties {
                  attributeType
                  defaultValue
                  description
                  name
                  schemaType
                  timestamp
                  value
                  writable
                }
                telemetry {
                  attributeType
                  description
                  index
                  name
                  schemaType
                }
              }
            }
            """
        )
        variables: dict[str, object] = {
            "iotEndpointId": iot_endpoint_id,
            "modelId": model_id,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return IotUpdateModelUsedByEndpoint.parse_obj(data)

    async def platform_admin_add_collaborative_member(
        self,
        collaborative_id: str,
        user_id: str,
        permission: Union[Optional[CollaborativeMemberPermission], UnsetType] = UNSET,
    ) -> PlatformAdminAddCollaborativeMember:
        query = gql(
            """
            mutation platformAdmin_addCollaborativeMember($collaborativeId: ID!, $permission: CollaborativeMemberPermission, $userId: ID!) {
              platformAdmin_addCollaborativeMember(
                collaborativeId: $collaborativeId
                permission: $permission
                userId: $userId
              ) {
                collaborativeId
                description
                hostOrganizationId
                memberOrganizations {
                  accessApprovedByUserId
                  collaborativeId
                  memberState
                  organization {
                    hostOrganization
                    name
                    organizationId
                  }
                  submittedByUser {
                    email
                    firstName
                    lastActive
                    lastName
                    mobile
                    organization {
                      hostOrganization
                      name
                      organizationId
                    }
                    userAccountState
                    userId
                    userRoles
                  }
                  submittedTimestamp
                  usersInCollaborative {
                    permission
                    user {
                      email
                      firstName
                      lastActive
                      lastName
                      mobile
                      organization {
                        hostOrganization
                        name
                        organizationId
                      }
                      userAccountState
                      userId
                      userRoles
                    }
                  }
                }
                name
              }
            }
            """
        )
        variables: dict[str, object] = {
            "collaborativeId": collaborative_id,
            "permission": permission,
            "userId": user_id,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return PlatformAdminAddCollaborativeMember.parse_obj(data)

    async def storage_update_data_store_file(
        self,
        data_store_file_id: str,
        data_store_directory_id: Union[Optional[str], UnsetType] = UNSET,
        description: Union[Optional[str], UnsetType] = UNSET,
        name: Union[Optional[str], UnsetType] = UNSET,
    ) -> StorageUpdateDataStoreFile:
        query = gql(
            """
            mutation storage_updateDataStoreFile($dataStoreDirectoryId: ID, $dataStoreFileId: ID!, $description: String, $name: String) {
              storage_updateDataStoreFile(
                dataStoreDirectoryId: $dataStoreDirectoryId
                dataStoreFileId: $dataStoreFileId
                description: $description
                name: $name
              ) {
                contentType
                dataStoreDirectoryId
                dataStoreFileId
                dataStoreId
                dataViewIds
                description
                fileExtension
                lastModified
                name
                ownerUserId
                s3ConfirmedUpload
                storageSizeBytes
              }
            }
            """
        )
        variables: dict[str, object] = {
            "dataStoreDirectoryId": data_store_directory_id,
            "dataStoreFileId": data_store_file_id,
            "description": description,
            "name": name,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return StorageUpdateDataStoreFile.parse_obj(data)

    async def platform_admin_update_organization(
        self, organization_id: str, name: Union[Optional[str], UnsetType] = UNSET
    ) -> PlatformAdminUpdateOrganization:
        query = gql(
            """
            mutation platformAdmin_updateOrganization($name: String, $organizationId: ID!) {
              platformAdmin_updateOrganization(name: $name, organizationId: $organizationId) {
                hostOrganization
                name
                organizationId
              }
            }
            """
        )
        variables: dict[str, object] = {"name": name, "organizationId": organization_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return PlatformAdminUpdateOrganization.parse_obj(data)

    async def data_capture_update_data_model(
        self, capture_id: str, data_model: DataCaptureDataModelInput
    ) -> DataCaptureUpdateDataModel:
        query = gql(
            """
            mutation dataCapture_updateDataModel($captureId: ID!, $dataModel: DataCaptureDataModelInput!) {
              dataCapture_updateDataModel(captureId: $captureId, dataModel: $dataModel) {
                dateCreated
                dateUpdated
                errors
                items {
                  attributes {
                    attributeType
                    description
                    displayName
                    schemaType
                    unit
                    userDefinedId
                  }
                  description
                  displayName
                  userDefinedId
                }
                state
                version
              }
            }
            """
        )
        variables: dict[str, object] = {
            "captureId": capture_id,
            "dataModel": data_model,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return DataCaptureUpdateDataModel.parse_obj(data)

    async def data_capture_attach_file(
        self,
        capture_id: str,
        file_name: str,
        description: Union[Optional[str], UnsetType] = UNSET,
    ) -> DataCaptureAttachFile:
        query = gql(
            """
            mutation dataCapture_attachFile($captureId: ID!, $description: String, $fileName: String!) {
              dataCapture_attachFile(
                captureId: $captureId
                description: $description
                fileName: $fileName
              ) {
                itemId
                uploadId
                url
              }
            }
            """
        )
        variables: dict[str, object] = {
            "captureId": capture_id,
            "description": description,
            "fileName": file_name,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return DataCaptureAttachFile.parse_obj(data)

    async def data_capture_delete_capture(
        self, capture_id: str
    ) -> DataCaptureDeleteCapture:
        query = gql(
            """
            mutation dataCapture_deleteCapture($captureId: ID!) {
              dataCapture_deleteCapture(captureId: $captureId) {
                captureId
                captureType
                dataModel {
                  dateCreated
                  dateUpdated
                  errors
                  items {
                    attributes {
                      attributeType
                      description
                      displayName
                      schemaType
                      unit
                      userDefinedId
                    }
                    description
                    displayName
                    userDefinedId
                  }
                  state
                  version
                }
                dateCreated
                dateUpdated
                description
                displayName
                ownerUserId
                state
                stateHistory {
                  dateCreated
                  message
                  newState
                }
                timeSettings {
                  actualStartTime
                  actualStopTime
                  errors
                  scheduledStartTime
                  scheduledStopTime
                  startTimeType
                  state
                  stopTimeType
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"captureId": capture_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return DataCaptureDeleteCapture.parse_obj(data)

    async def data_capture_create_capture(
        self,
        capture_type: DataCaptureType,
        display_name: str,
        description: Union[Optional[str], UnsetType] = UNSET,
    ) -> DataCaptureCreateCapture:
        query = gql(
            """
            mutation dataCapture_createCapture($captureType: DataCaptureType!, $description: String, $displayName: String!) {
              dataCapture_createCapture(
                captureType: $captureType
                description: $description
                displayName: $displayName
              ) {
                captureId
                captureType
                dataModel {
                  dateCreated
                  dateUpdated
                  errors
                  items {
                    attributes {
                      attributeType
                      description
                      displayName
                      schemaType
                      unit
                      userDefinedId
                    }
                    description
                    displayName
                    userDefinedId
                  }
                  state
                  version
                }
                dateCreated
                dateUpdated
                description
                displayName
                ownerUserId
                state
                stateHistory {
                  dateCreated
                  message
                  newState
                }
                timeSettings {
                  actualStartTime
                  actualStopTime
                  errors
                  scheduledStartTime
                  scheduledStopTime
                  startTimeType
                  state
                  stopTimeType
                }
              }
            }
            """
        )
        variables: dict[str, object] = {
            "captureType": capture_type,
            "description": description,
            "displayName": display_name,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return DataCaptureCreateCapture.parse_obj(data)

    async def storage_update_data_store_directory(
        self,
        data_store_directory_id: str,
        name: Union[Optional[str], UnsetType] = UNSET,
        parent_directory_id: Union[Optional[str], UnsetType] = UNSET,
    ) -> StorageUpdateDataStoreDirectory:
        query = gql(
            """
            mutation storage_updateDataStoreDirectory($dataStoreDirectoryId: ID!, $name: String, $parentDirectoryId: ID) {
              storage_updateDataStoreDirectory(
                dataStoreDirectoryId: $dataStoreDirectoryId
                name: $name
                parentDirectoryId: $parentDirectoryId
              ) {
                contents {
                  dataStoreDirectory {
                    contents {
                      dataStoreFile {
                        contentType
                        dataStoreDirectoryId
                        dataStoreFileId
                        dataStoreId
                        dataViewIds
                        description
                        fileExtension
                        lastModified
                        name
                        ownerUserId
                        s3ConfirmedUpload
                        storageSizeBytes
                      }
                      objectType
                    }
                    dataStoreDirectoryId
                    dataStoreId
                    homeDirectory
                    name
                    ownerUserId
                    parentDirectoryId
                  }
                  objectType
                }
                dataStoreDirectoryId
                dataStoreId
                homeDirectory
                name
                ownerUserId
                parentDirectoryId
              }
            }
            """
        )
        variables: dict[str, object] = {
            "dataStoreDirectoryId": data_store_directory_id,
            "name": name,
            "parentDirectoryId": parent_directory_id,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return StorageUpdateDataStoreDirectory.parse_obj(data)

    async def data_capture_publish_data(
        self, capture_id: str, data: List[DataCaptureDataRecordInput]
    ) -> DataCapturePublishData:
        query = gql(
            """
            mutation dataCapture_publishData($captureId: ID!, $data: [DataCaptureDataRecordInput]!) {
              dataCapture_publishData(captureId: $captureId, data: $data) {
                captureId
                dataWritten {
                  timestamp
                  userDefinedId
                  value
                }
                failedRecords {
                  attributeIndex
                  errorType
                  message
                  recordIndex
                }
                logs {
                  error
                  message
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"captureId": capture_id, "data": data}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return DataCapturePublishData.parse_obj(data)

    async def platform_admin_create_organization(
        self, name: str, host_organization: Union[Optional[bool], UnsetType] = UNSET
    ) -> PlatformAdminCreateOrganization:
        query = gql(
            """
            mutation platformAdmin_createOrganization($hostOrganization: Boolean, $name: String!) {
              platformAdmin_createOrganization(
                hostOrganization: $hostOrganization
                name: $name
              ) {
                hostOrganization
                name
                organizationId
              }
            }
            """
        )
        variables: dict[str, object] = {
            "hostOrganization": host_organization,
            "name": name,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return PlatformAdminCreateOrganization.parse_obj(data)

    async def platform_admin_delete_organization(
        self, organization_id: str, comment: Union[Optional[str], UnsetType] = UNSET
    ) -> PlatformAdminDeleteOrganization:
        query = gql(
            """
            mutation platformAdmin_deleteOrganization($comment: String, $organizationId: ID!) {
              platformAdmin_deleteOrganization(
                comment: $comment
                organizationId: $organizationId
              ) {
                hostOrganization
                name
                organizationId
              }
            }
            """
        )
        variables: dict[str, object] = {
            "comment": comment,
            "organizationId": organization_id,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return PlatformAdminDeleteOrganization.parse_obj(data)

    async def iot_remove_endpoints_from_group(
        self, iot_endpoint_ids: List[str], iot_group_id: str
    ) -> IotRemoveEndpointsFromGroup:
        query = gql(
            """
            mutation iot_removeEndpointsFromGroup($iotEndpointIds: [ID]!, $iotGroupId: ID!) {
              iot_removeEndpointsFromGroup(
                iotEndpointIds: $iotEndpointIds
                iotGroupId: $iotGroupId
              ) {
                description
                endpoints {
                  description
                  iotEndpointId
                  iotHubId
                  modelId
                  name
                  ownerUserId
                  properties {
                    attributeType
                    defaultValue
                    description
                    name
                    schemaType
                    timestamp
                    value
                    writable
                  }
                  telemetry {
                    attributeType
                    description
                    index
                    name
                    schemaType
                  }
                }
                iotEndpointIds
                iotGroupId
                iotHubId
                name
                ownerUserId
              }
            }
            """
        )
        variables: dict[str, object] = {
            "iotEndpointIds": iot_endpoint_ids,
            "iotGroupId": iot_group_id,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return IotRemoveEndpointsFromGroup.parse_obj(data)

    async def data_capture_delete_attachment(
        self, attachment_id: str, capture_id: str
    ) -> DataCaptureDeleteAttachment:
        query = gql(
            """
            mutation dataCapture_deleteAttachment($attachmentId: ID!, $captureId: ID!) {
              dataCapture_deleteAttachment(attachmentId: $attachmentId, captureId: $captureId) {
                attachmentId
                attachmentType
                dateCreated
                dateUpdated
                description
                error
                name
                ownerUserId
              }
            }
            """
        )
        variables: dict[str, object] = {
            "attachmentId": attachment_id,
            "captureId": capture_id,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return DataCaptureDeleteAttachment.parse_obj(data)

    async def platform_admin_update_user(
        self,
        user_id: str,
        first_name: Union[Optional[str], UnsetType] = UNSET,
        last_name: Union[Optional[str], UnsetType] = UNSET,
        user_account_state: Union[Optional[UserAccountState], UnsetType] = UNSET,
        user_roles: Union[Optional[List[Optional[UserRole]]], UnsetType] = UNSET,
    ) -> PlatformAdminUpdateUser:
        query = gql(
            """
            mutation platformAdmin_updateUser($firstName: String, $lastName: String, $userAccountState: UserAccountState, $userId: ID!, $userRoles: [UserRole]) {
              platformAdmin_updateUser(
                firstName: $firstName
                lastName: $lastName
                userAccountState: $userAccountState
                userId: $userId
                userRoles: $userRoles
              ) {
                email
                firstName
                lastActive
                lastName
                mobile
                organization {
                  hostOrganization
                  name
                  organizationId
                }
                userAccountState
                userId
                userRoles
              }
            }
            """
        )
        variables: dict[str, object] = {
            "firstName": first_name,
            "lastName": last_name,
            "userAccountState": user_account_state,
            "userId": user_id,
            "userRoles": user_roles,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return PlatformAdminUpdateUser.parse_obj(data)

    async def platform_admin_remove_collaborative_member(
        self, collaborative_id: str, user_id: str
    ) -> PlatformAdminRemoveCollaborativeMember:
        query = gql(
            """
            mutation platformAdmin_removeCollaborativeMember($collaborativeId: ID!, $userId: ID!) {
              platformAdmin_removeCollaborativeMember(
                collaborativeId: $collaborativeId
                userId: $userId
              ) {
                collaborativeId
                description
                hostOrganizationId
                memberOrganizations {
                  accessApprovedByUserId
                  collaborativeId
                  memberState
                  organization {
                    hostOrganization
                    name
                    organizationId
                  }
                  submittedByUser {
                    email
                    firstName
                    lastActive
                    lastName
                    mobile
                    organization {
                      hostOrganization
                      name
                      organizationId
                    }
                    userAccountState
                    userId
                    userRoles
                  }
                  submittedTimestamp
                  usersInCollaborative {
                    permission
                    user {
                      email
                      firstName
                      lastActive
                      lastName
                      mobile
                      organization {
                        hostOrganization
                        name
                        organizationId
                      }
                      userAccountState
                      userId
                      userRoles
                    }
                  }
                }
                name
              }
            }
            """
        )
        variables: dict[str, object] = {
            "collaborativeId": collaborative_id,
            "userId": user_id,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return PlatformAdminRemoveCollaborativeMember.parse_obj(data)

    async def iot_create_new_model_version(
        self,
        model_id: str,
        description: Union[Optional[str], UnsetType] = UNSET,
        display_name: Union[Optional[str], UnsetType] = UNSET,
        properties: Union[
            Optional[List[Optional[ModelPropertyInput]]], UnsetType
        ] = UNSET,
        telemetry: Union[
            Optional[List[Optional[ModelTelemetryInput]]], UnsetType
        ] = UNSET,
        version: Union[Optional[int], UnsetType] = UNSET,
    ) -> IotCreateNewModelVersion:
        query = gql(
            """
            mutation iot_createNewModelVersion($description: String, $displayName: String, $modelId: ID!, $properties: [ModelPropertyInput], $telemetry: [ModelTelemetryInput], $version: Int) {
              iot_createNewModelVersion(
                description: $description
                displayName: $displayName
                modelId: $modelId
                properties: $properties
                telemetry: $telemetry
                version: $version
              ) {
                description
                displayName
                dtmi
                modelId
                ownerUserId
                properties {
                  attributeType
                  defaultValue
                  description
                  index
                  name
                  schemaType
                  writable
                }
                telemetry {
                  attributeType
                  description
                  index
                  name
                  schemaType
                }
              }
            }
            """
        )
        variables: dict[str, object] = {
            "description": description,
            "displayName": display_name,
            "modelId": model_id,
            "properties": properties,
            "telemetry": telemetry,
            "version": version,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return IotCreateNewModelVersion.parse_obj(data)

    async def storage_create_data_store_file(
        self,
        data_store_directory_id: str,
        data_store_id: str,
        file_extension: str,
        name: str,
        description: Union[Optional[str], UnsetType] = UNSET,
    ) -> StorageCreateDataStoreFile:
        query = gql(
            """
            mutation storage_createDataStoreFile($dataStoreDirectoryId: ID!, $dataStoreId: ID!, $description: String, $fileExtension: String!, $name: String!) {
              storage_createDataStoreFile(
                dataStoreDirectoryId: $dataStoreDirectoryId
                dataStoreId: $dataStoreId
                description: $description
                fileExtension: $fileExtension
                name: $name
              ) {
                itemId
                uploadId
                url
              }
            }
            """
        )
        variables: dict[str, object] = {
            "dataStoreDirectoryId": data_store_directory_id,
            "dataStoreId": data_store_id,
            "description": description,
            "fileExtension": file_extension,
            "name": name,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return StorageCreateDataStoreFile.parse_obj(data)

    async def platform_admin_delete_collaborative(
        self, collaborative_id: str, comment: Union[Optional[str], UnsetType] = UNSET
    ) -> PlatformAdminDeleteCollaborative:
        query = gql(
            """
            mutation platformAdmin_deleteCollaborative($collaborativeId: ID!, $comment: String) {
              platformAdmin_deleteCollaborative(
                collaborativeId: $collaborativeId
                comment: $comment
              ) {
                collaborativeId
                description
                hostOrganizationId
                memberOrganizations {
                  accessApprovedByUserId
                  collaborativeId
                  memberState
                  organization {
                    hostOrganization
                    name
                    organizationId
                  }
                  submittedByUser {
                    email
                    firstName
                    lastActive
                    lastName
                    mobile
                    organization {
                      hostOrganization
                      name
                      organizationId
                    }
                    userAccountState
                    userId
                    userRoles
                  }
                  submittedTimestamp
                  usersInCollaborative {
                    permission
                    user {
                      email
                      firstName
                      lastActive
                      lastName
                      mobile
                      organization {
                        hostOrganization
                        name
                        organizationId
                      }
                      userAccountState
                      userId
                      userRoles
                    }
                  }
                }
                name
              }
            }
            """
        )
        variables: dict[str, object] = {
            "collaborativeId": collaborative_id,
            "comment": comment,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return PlatformAdminDeleteCollaborative.parse_obj(data)

    async def time_series_db_update_database(
        self,
        time_series_db_id: str,
        description: Union[Optional[str], UnsetType] = UNSET,
        name: Union[Optional[str], UnsetType] = UNSET,
    ) -> TimeSeriesDbUpdateDatabase:
        query = gql(
            """
            mutation timeSeriesDb_updateDatabase($description: String, $name: String, $timeSeriesDbId: ID!) {
              timeSeriesDb_updateDatabase(
                description: $description
                name: $name
                timeSeriesDbId: $timeSeriesDbId
              ) {
                databaseName
                description
                name
                ownerUserId
                tableName
                timeSeriesDbId
              }
            }
            """
        )
        variables: dict[str, object] = {
            "description": description,
            "name": name,
            "timeSeriesDbId": time_series_db_id,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return TimeSeriesDbUpdateDatabase.parse_obj(data)

    async def data_capture_update_capture(
        self,
        capture_id: str,
        update_description: bool,
        update_display_name: bool,
        update_scheduled_start_time: bool,
        update_scheduled_stop_time: bool,
        update_start_time_type: bool,
        update_stop_time_type: bool,
        description: Union[Optional[str], UnsetType] = UNSET,
        display_name: Union[Optional[str], UnsetType] = UNSET,
        scheduled_start_time: Union[Optional[str], UnsetType] = UNSET,
        scheduled_stop_time: Union[Optional[str], UnsetType] = UNSET,
        start_time_type: Union[Optional[DataCaptureTimeConfigType], UnsetType] = UNSET,
        stop_time_type: Union[Optional[DataCaptureTimeConfigType], UnsetType] = UNSET,
    ) -> DataCaptureUpdateCapture:
        query = gql(
            """
            mutation dataCapture_updateCapture($captureId: ID!, $description: String, $displayName: String, $scheduledStartTime: String, $scheduledStopTime: String, $startTimeType: DataCaptureTimeConfigType, $stopTimeType: DataCaptureTimeConfigType, $updateDescription: Boolean!, $updateDisplayName: Boolean!, $updateScheduledStartTime: Boolean!, $updateScheduledStopTime: Boolean!, $updateStartTimeType: Boolean!, $updateStopTimeType: Boolean!) {
              dataCapture_updateCapture(
                captureId: $captureId
                description: $description
                displayName: $displayName
                scheduledStartTime: $scheduledStartTime
                scheduledStopTime: $scheduledStopTime
                startTimeType: $startTimeType
                stopTimeType: $stopTimeType
                updateDescription: $updateDescription
                updateDisplayName: $updateDisplayName
                updateScheduledStartTime: $updateScheduledStartTime
                updateScheduledStopTime: $updateScheduledStopTime
                updateStartTimeType: $updateStartTimeType
                updateStopTimeType: $updateStopTimeType
              ) {
                captureId
                captureType
                dataModel {
                  dateCreated
                  dateUpdated
                  errors
                  items {
                    attributes {
                      attributeType
                      description
                      displayName
                      schemaType
                      unit
                      userDefinedId
                    }
                    description
                    displayName
                    userDefinedId
                  }
                  state
                  version
                }
                dateCreated
                dateUpdated
                description
                displayName
                ownerUserId
                state
                stateHistory {
                  dateCreated
                  message
                  newState
                }
                timeSettings {
                  actualStartTime
                  actualStopTime
                  errors
                  scheduledStartTime
                  scheduledStopTime
                  startTimeType
                  state
                  stopTimeType
                }
              }
            }
            """
        )
        variables: dict[str, object] = {
            "captureId": capture_id,
            "description": description,
            "displayName": display_name,
            "scheduledStartTime": scheduled_start_time,
            "scheduledStopTime": scheduled_stop_time,
            "startTimeType": start_time_type,
            "stopTimeType": stop_time_type,
            "updateDescription": update_description,
            "updateDisplayName": update_display_name,
            "updateScheduledStartTime": update_scheduled_start_time,
            "updateScheduledStopTime": update_scheduled_stop_time,
            "updateStartTimeType": update_start_time_type,
            "updateStopTimeType": update_stop_time_type,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return DataCaptureUpdateCapture.parse_obj(data)

    async def storage_get_data_store_file_download_url(
        self, data_store_file_id: str
    ) -> StorageGetDataStoreFileDownloadUrl:
        query = gql(
            """
            query storage_getDataStoreFileDownloadUrl($dataStoreFileId: ID!) {
              storage_getDataStoreFileDownloadUrl(dataStoreFileId: $dataStoreFileId) {
                itemId
                uploadId
                url
              }
            }
            """
        )
        variables: dict[str, object] = {"dataStoreFileId": data_store_file_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return StorageGetDataStoreFileDownloadUrl.parse_obj(data)

    async def iot_list_hubs(self) -> IotListHubs:
        query = gql(
            """
            query iot_listHubs {
              iot_listHubs {
                description
                iotHubId
                name
                ownerUserId
              }
            }
            """
        )
        variables: dict[str, object] = {}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return IotListHubs.parse_obj(data)

    async def user_get_user_session(self) -> UserGetUserSession:
        query = gql(
            """
            query user_getUserSession {
              user_getUserSession {
                user {
                  email
                  firstName
                  lastActive
                  lastName
                  mobile
                  organization {
                    hostOrganization
                    name
                    organizationId
                  }
                  userAccountState
                  userId
                  userRoles
                }
              }
            }
            """
        )
        variables: dict[str, object] = {}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return UserGetUserSession.parse_obj(data)

    async def time_series_db_list_all_asset_last_values(
        self,
        time_series_db_id: str,
        client_token: Union[Optional[str], UnsetType] = UNSET,
        next_token: Union[Optional[str], UnsetType] = UNSET,
    ) -> TimeSeriesDbListAllAssetLastValues:
        query = gql(
            """
            query timeSeriesDb_listAllAssetLastValues($clientToken: String, $nextToken: String, $timeSeriesDbId: ID!) {
              timeSeriesDb_listAllAssetLastValues(
                clientToken: $clientToken
                nextToken: $nextToken
                timeSeriesDbId: $timeSeriesDbId
              ) {
                clientToken
                data {
                  assetId
                  attributes {
                    attributeType
                    data {
                      timestamp
                      value
                    }
                    lastValue
                    lastValueTime
                    name
                  }
                  name
                }
                nextToken
                queryId
                queryProgressPercentage
                resultChunkIndex
              }
            }
            """
        )
        variables: dict[str, object] = {
            "clientToken": client_token,
            "nextToken": next_token,
            "timeSeriesDbId": time_series_db_id,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return TimeSeriesDbListAllAssetLastValues.parse_obj(data)

    async def iot_list_groups(
        self,
        iot_hub_id: str,
        include_endpoints: Union[Optional[bool], UnsetType] = UNSET,
    ) -> IotListGroups:
        query = gql(
            """
            query iot_listGroups($includeEndpoints: Boolean, $iotHubId: ID!) {
              iot_listGroups(includeEndpoints: $includeEndpoints, iotHubId: $iotHubId) {
                description
                endpoints {
                  description
                  iotEndpointId
                  iotHubId
                  modelId
                  name
                  ownerUserId
                  properties {
                    attributeType
                    defaultValue
                    description
                    name
                    schemaType
                    timestamp
                    value
                    writable
                  }
                  telemetry {
                    attributeType
                    description
                    index
                    name
                    schemaType
                  }
                }
                iotEndpointIds
                iotGroupId
                iotHubId
                name
                ownerUserId
              }
            }
            """
        )
        variables: dict[str, object] = {
            "includeEndpoints": include_endpoints,
            "iotHubId": iot_hub_id,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return IotListGroups.parse_obj(data)

    async def data_capture_get_active_capture_data_export_download_url(
        self, capture_id: str
    ) -> DataCaptureGetActiveCaptureDataExportDownloadUrl:
        query = gql(
            """
            query dataCapture_getActiveCaptureDataExportDownloadUrl($captureId: ID!) {
              dataCapture_getActiveCaptureDataExportDownloadUrl(captureId: $captureId) {
                dateCompleted
                dateStarted
                exportType
                logs
                name
                state
                url
              }
            }
            """
        )
        variables: dict[str, object] = {"captureId": capture_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return DataCaptureGetActiveCaptureDataExportDownloadUrl.parse_obj(data)

    async def time_series_db_query_database(
        self,
        assets: List[TimeSeriesQueryAssetInput],
        query_type: TimeSeriesDbQueryType,
        time_series_db_id: str,
        client_token: Union[Optional[str], UnsetType] = UNSET,
        end_time: Union[Optional[str], UnsetType] = UNSET,
        max_rows: Union[Optional[int], UnsetType] = UNSET,
        next_token: Union[Optional[str], UnsetType] = UNSET,
        query_string: Union[Optional[str], UnsetType] = UNSET,
        start_time: Union[Optional[str], UnsetType] = UNSET,
    ) -> TimeSeriesDbQueryDatabase:
        query = gql(
            """
            query timeSeriesDb_queryDatabase($assets: [TimeSeriesQueryAssetInput]!, $clientToken: String, $endTime: String, $maxRows: Int, $nextToken: String, $queryString: String, $queryType: TimeSeriesDbQueryType!, $startTime: String, $timeSeriesDbId: ID!) {
              timeSeriesDb_queryDatabase(
                assets: $assets
                clientToken: $clientToken
                endTime: $endTime
                maxRows: $maxRows
                nextToken: $nextToken
                queryString: $queryString
                queryType: $queryType
                startTime: $startTime
                timeSeriesDbId: $timeSeriesDbId
              ) {
                clientToken
                nextToken
                presignedUrl
                queryId
                queryProgressPercentage
                queryString
                resultChunkIndex
              }
            }
            """
        )
        variables: dict[str, object] = {
            "assets": assets,
            "clientToken": client_token,
            "endTime": end_time,
            "maxRows": max_rows,
            "nextToken": next_token,
            "queryString": query_string,
            "queryType": query_type,
            "startTime": start_time,
            "timeSeriesDbId": time_series_db_id,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return TimeSeriesDbQueryDatabase.parse_obj(data)

    async def data_capture_get_data_export_download_url(
        self, capture_id: str
    ) -> DataCaptureGetDataExportDownloadUrl:
        query = gql(
            """
            query dataCapture_getDataExportDownloadUrl($captureId: ID!) {
              dataCapture_getDataExportDownloadUrl(captureId: $captureId) {
                dateCompleted
                dateStarted
                exportType
                logs
                name
                state
                url
              }
            }
            """
        )
        variables: dict[str, object] = {"captureId": capture_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return DataCaptureGetDataExportDownloadUrl.parse_obj(data)

    async def iot_query_by_time_range(
        self,
        end_time: str,
        endpoint_query_filters: List[EndpointQueryFilter],
        start_time: str,
        client_token: Union[Optional[str], UnsetType] = UNSET,
        next_token: Union[Optional[str], UnsetType] = UNSET,
        query_id: Union[Optional[str], UnsetType] = UNSET,
        query_string: Union[Optional[str], UnsetType] = UNSET,
    ) -> IotQueryByTimeRange:
        query = gql(
            """
            query iot_queryByTimeRange($clientToken: String, $endTime: String!, $endpointQueryFilters: [EndpointQueryFilter]!, $nextToken: String, $queryId: String, $queryString: String, $startTime: String!) {
              iot_queryByTimeRange(
                clientToken: $clientToken
                endTime: $endTime
                endpointQueryFilters: $endpointQueryFilters
                nextToken: $nextToken
                queryId: $queryId
                queryString: $queryString
                startTime: $startTime
              ) {
                clientToken
                endTime
                nextToken
                presignedUrl
                queryId
                queryString
                resultChunkIndex
                startTime
              }
            }
            """
        )
        variables: dict[str, object] = {
            "clientToken": client_token,
            "endTime": end_time,
            "endpointQueryFilters": endpoint_query_filters,
            "nextToken": next_token,
            "queryId": query_id,
            "queryString": query_string,
            "startTime": start_time,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return IotQueryByTimeRange.parse_obj(data)

    async def collaborative_list_collaboratives(
        self,
    ) -> CollaborativeListCollaboratives:
        query = gql(
            """
            query collaborative_listCollaboratives {
              collaborative_listCollaboratives {
                collaborativeId
                description
                hostOrganizationId
                memberOrganizations {
                  accessApprovedByUserId
                  collaborativeId
                  memberState
                  organization {
                    hostOrganization
                    name
                    organizationId
                  }
                  submittedByUser {
                    email
                    firstName
                    lastActive
                    lastName
                    mobile
                    organization {
                      hostOrganization
                      name
                      organizationId
                    }
                    userAccountState
                    userId
                    userRoles
                  }
                  submittedTimestamp
                  usersInCollaborative {
                    permission
                    user {
                      email
                      firstName
                      lastActive
                      lastName
                      mobile
                      organization {
                        hostOrganization
                        name
                        organizationId
                      }
                      userAccountState
                      userId
                      userRoles
                    }
                  }
                }
                name
              }
            }
            """
        )
        variables: dict[str, object] = {}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return CollaborativeListCollaboratives.parse_obj(data)

    async def collaborative_list_collaboratives_service_shared_with(
        self, service_id: str, service_type: ServiceType
    ) -> CollaborativeListCollaborativesServiceSharedWith:
        query = gql(
            """
            query collaborative_listCollaborativesServiceSharedWith($serviceId: ID!, $serviceType: ServiceType!) {
              collaborative_listCollaborativesServiceSharedWith(
                serviceId: $serviceId
                serviceType: $serviceType
              ) {
                collaborativeId
                description
                hostOrganizationId
                memberOrganizations {
                  accessApprovedByUserId
                  collaborativeId
                  memberState
                  organization {
                    hostOrganization
                    name
                    organizationId
                  }
                  submittedByUser {
                    email
                    firstName
                    lastActive
                    lastName
                    mobile
                    organization {
                      hostOrganization
                      name
                      organizationId
                    }
                    userAccountState
                    userId
                    userRoles
                  }
                  submittedTimestamp
                  usersInCollaborative {
                    permission
                    user {
                      email
                      firstName
                      lastActive
                      lastName
                      mobile
                      organization {
                        hostOrganization
                        name
                        organizationId
                      }
                      userAccountState
                      userId
                      userRoles
                    }
                  }
                }
                name
              }
            }
            """
        )
        variables: dict[str, object] = {
            "serviceId": service_id,
            "serviceType": service_type,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return CollaborativeListCollaborativesServiceSharedWith.parse_obj(data)

    async def storage_get_data_store(self, data_store_id: str) -> StorageGetDataStore:
        query = gql(
            """
            query storage_getDataStore($dataStoreId: ID!) {
              storage_getDataStore(dataStoreId: $dataStoreId) {
                dataStoreId
                description
                homeDirectoryId
                name
                ownerUserId
              }
            }
            """
        )
        variables: dict[str, object] = {"dataStoreId": data_store_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return StorageGetDataStore.parse_obj(data)

    async def iot_get_endpoint_token(self, iot_endpoint_id: str) -> IotGetEndpointToken:
        query = gql(
            """
            query iot_getEndpointToken($iotEndpointId: ID!) {
              iot_getEndpointToken(iotEndpointId: $iotEndpointId) {
                dateCreated
                dateExpires
                lastActive
                name
                scope
                tokenId
                tokenType
                tokenValue
                userId
              }
            }
            """
        )
        variables: dict[str, object] = {"iotEndpointId": iot_endpoint_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return IotGetEndpointToken.parse_obj(data)

    async def data_capture_list_attachments(
        self,
        capture_id: str,
        limit: Union[Optional[int], UnsetType] = UNSET,
        next_token: Union[Optional[str], UnsetType] = UNSET,
    ) -> DataCaptureListAttachments:
        query = gql(
            """
            query dataCapture_listAttachments($captureId: ID!, $limit: Int, $nextToken: String) {
              dataCapture_listAttachments(
                captureId: $captureId
                limit: $limit
                nextToken: $nextToken
              ) {
                attachmentId
                attachmentType
                dateCreated
                dateUpdated
                description
                error
                name
                ownerUserId
              }
            }
            """
        )
        variables: dict[str, object] = {
            "captureId": capture_id,
            "limit": limit,
            "nextToken": next_token,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return DataCaptureListAttachments.parse_obj(data)

    async def iot_list_endpoint_last_values(
        self,
        iot_endpoint_id: str,
        client_token: Union[Optional[str], UnsetType] = UNSET,
        next_token: Union[Optional[str], UnsetType] = UNSET,
        query_id: Union[Optional[str], UnsetType] = UNSET,
        query_string: Union[Optional[str], UnsetType] = UNSET,
    ) -> IotListEndpointLastValues:
        query = gql(
            """
            query iot_listEndpointLastValues($clientToken: String, $iotEndpointId: ID!, $nextToken: String, $queryId: String, $queryString: String) {
              iot_listEndpointLastValues(
                clientToken: $clientToken
                iotEndpointId: $iotEndpointId
                nextToken: $nextToken
                queryId: $queryId
                queryString: $queryString
              ) {
                clientToken
                data {
                  iotEndpointId
                  telemetryValues {
                    telemetryModel {
                      attributeType
                      description
                      index
                      name
                      schemaType
                    }
                    timestamp
                    value
                  }
                }
                nextToken
                presignedUrl
                queryId
                resultChunkIndex
                resultStoredInS3
              }
            }
            """
        )
        variables: dict[str, object] = {
            "clientToken": client_token,
            "iotEndpointId": iot_endpoint_id,
            "nextToken": next_token,
            "queryId": query_id,
            "queryString": query_string,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return IotListEndpointLastValues.parse_obj(data)

    async def data_capture_get_file_attachment_download_url(
        self, attachment_id: str, capture_id: str
    ) -> DataCaptureGetFileAttachmentDownloadUrl:
        query = gql(
            """
            query dataCapture_getFileAttachmentDownloadUrl($attachmentId: ID!, $captureId: ID!) {
              dataCapture_getFileAttachmentDownloadUrl(
                attachmentId: $attachmentId
                captureId: $captureId
              ) {
                itemId
                uploadId
                url
              }
            }
            """
        )
        variables: dict[str, object] = {
            "attachmentId": attachment_id,
            "captureId": capture_id,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return DataCaptureGetFileAttachmentDownloadUrl.parse_obj(data)

    async def data_capture_list_captures(
        self,
        include_data_models: Union[Optional[bool], UnsetType] = UNSET,
        limit: Union[Optional[int], UnsetType] = UNSET,
        next_token: Union[Optional[str], UnsetType] = UNSET,
    ) -> DataCaptureListCaptures:
        query = gql(
            """
            query dataCapture_listCaptures($includeDataModels: Boolean, $limit: Int, $nextToken: String) {
              dataCapture_listCaptures(
                includeDataModels: $includeDataModels
                limit: $limit
                nextToken: $nextToken
              ) {
                captures {
                  captureId
                  captureType
                  dataModel {
                    dateCreated
                    dateUpdated
                    errors
                    items {
                      attributes {
                        attributeType
                        description
                        displayName
                        schemaType
                        unit
                        userDefinedId
                      }
                      description
                      displayName
                      userDefinedId
                    }
                    state
                    version
                  }
                  dateCreated
                  dateUpdated
                  description
                  displayName
                  ownerUserId
                  state
                  stateHistory {
                    dateCreated
                    message
                    newState
                  }
                  timeSettings {
                    actualStartTime
                    actualStopTime
                    errors
                    scheduledStartTime
                    scheduledStopTime
                    startTimeType
                    state
                    stopTimeType
                  }
                }
                nextToken
              }
            }
            """
        )
        variables: dict[str, object] = {
            "includeDataModels": include_data_models,
            "limit": limit,
            "nextToken": next_token,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return DataCaptureListCaptures.parse_obj(data)

    async def data_capture_get_data_model_export(
        self, capture_id: str
    ) -> DataCaptureGetDataModelExport:
        query = gql(
            """
            query dataCapture_getDataModelExport($captureId: ID!) {
              dataCapture_getDataModelExport(captureId: $captureId) {
                captureId
                contents
                fileName
              }
            }
            """
        )
        variables: dict[str, object] = {"captureId": capture_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return DataCaptureGetDataModelExport.parse_obj(data)

    async def platform_admin_get_user(self, user_id: str) -> PlatformAdminGetUser:
        query = gql(
            """
            query platformAdmin_getUser($userId: ID!) {
              platformAdmin_getUser(userId: $userId) {
                email
                firstName
                lastActive
                lastName
                mobile
                organization {
                  hostOrganization
                  name
                  organizationId
                }
                userAccountState
                userId
                userRoles
              }
            }
            """
        )
        variables: dict[str, object] = {"userId": user_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return PlatformAdminGetUser.parse_obj(data)

    async def iot_get_model_in_d_t_d_l_format(
        self, model_id: str
    ) -> IotGetModelInDTDLFormat:
        query = gql(
            """
            query iot_getModelInDTDLFormat($modelId: ID!) {
              iot_getModelInDTDLFormat(modelId: $modelId)
            }
            """
        )
        variables: dict[str, object] = {"modelId": model_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return IotGetModelInDTDLFormat.parse_obj(data)

    async def collaborative_list_collaborative_member_organization_requests(
        self,
        collaborative_id: Union[Optional[str], UnsetType] = UNSET,
        include_approved_requests: Union[Optional[bool], UnsetType] = UNSET,
        include_denied_requests: Union[Optional[bool], UnsetType] = UNSET,
    ) -> CollaborativeListCollaborativeMemberOrganizationRequests:
        query = gql(
            """
            query collaborative_listCollaborativeMemberOrganizationRequests($collaborativeId: ID, $includeApprovedRequests: Boolean, $includeDeniedRequests: Boolean) {
              collaborative_listCollaborativeMemberOrganizationRequests(
                collaborativeId: $collaborativeId
                includeApprovedRequests: $includeApprovedRequests
                includeDeniedRequests: $includeDeniedRequests
              ) {
                collaborativeId
                description
                hostOrganizationId
                memberOrganizations {
                  accessApprovedByUserId
                  collaborativeId
                  memberState
                  organization {
                    hostOrganization
                    name
                    organizationId
                  }
                  submittedByUser {
                    email
                    firstName
                    lastActive
                    lastName
                    mobile
                    organization {
                      hostOrganization
                      name
                      organizationId
                    }
                    userAccountState
                    userId
                    userRoles
                  }
                  submittedTimestamp
                  usersInCollaborative {
                    permission
                    user {
                      email
                      firstName
                      lastActive
                      lastName
                      mobile
                      organization {
                        hostOrganization
                        name
                        organizationId
                      }
                      userAccountState
                      userId
                      userRoles
                    }
                  }
                }
                name
              }
            }
            """
        )
        variables: dict[str, object] = {
            "collaborativeId": collaborative_id,
            "includeApprovedRequests": include_approved_requests,
            "includeDeniedRequests": include_denied_requests,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return CollaborativeListCollaborativeMemberOrganizationRequests.parse_obj(data)

    async def iot_get_endpoint(self, iot_endpoint_id: str) -> IotGetEndpoint:
        query = gql(
            """
            query iot_getEndpoint($iotEndpointId: ID!) {
              iot_getEndpoint(iotEndpointId: $iotEndpointId) {
                description
                iotEndpointId
                iotHubId
                modelId
                name
                ownerUserId
                properties {
                  attributeType
                  defaultValue
                  description
                  name
                  schemaType
                  timestamp
                  value
                  writable
                }
                telemetry {
                  attributeType
                  description
                  index
                  name
                  schemaType
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"iotEndpointId": iot_endpoint_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return IotGetEndpoint.parse_obj(data)

    async def collaborative_get_collaborative(
        self, collaborative_id: str
    ) -> CollaborativeGetCollaborative:
        query = gql(
            """
            query collaborative_getCollaborative($collaborativeId: ID!) {
              collaborative_getCollaborative(collaborativeId: $collaborativeId) {
                collaborativeId
                description
                hostOrganizationId
                memberOrganizations {
                  accessApprovedByUserId
                  collaborativeId
                  memberState
                  organization {
                    hostOrganization
                    name
                    organizationId
                  }
                  submittedByUser {
                    email
                    firstName
                    lastActive
                    lastName
                    mobile
                    organization {
                      hostOrganization
                      name
                      organizationId
                    }
                    userAccountState
                    userId
                    userRoles
                  }
                  submittedTimestamp
                  usersInCollaborative {
                    permission
                    user {
                      email
                      firstName
                      lastActive
                      lastName
                      mobile
                      organization {
                        hostOrganization
                        name
                        organizationId
                      }
                      userAccountState
                      userId
                      userRoles
                    }
                  }
                }
                name
              }
            }
            """
        )
        variables: dict[str, object] = {"collaborativeId": collaborative_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return CollaborativeGetCollaborative.parse_obj(data)

    async def data_capture_get_python_s_d_k_sample(
        self, capture_id: str
    ) -> DataCaptureGetPythonSDKSample:
        query = gql(
            """
            query dataCapture_getPythonSDKSample($captureId: ID!) {
              dataCapture_getPythonSDKSample(captureId: $captureId)
            }
            """
        )
        variables: dict[str, object] = {"captureId": capture_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return DataCaptureGetPythonSDKSample.parse_obj(data)

    async def collaborative_list_collaborative_services(
        self, collaborative_id: str
    ) -> CollaborativeListCollaborativeServices:
        query = gql(
            """
            query collaborative_listCollaborativeServices($collaborativeId: ID!) {
              collaborative_listCollaborativeServices(collaborativeId: $collaborativeId) {
                dataCapture {
                  captureId
                  captureType
                  dataModel {
                    dateCreated
                    dateUpdated
                    errors
                    items {
                      attributes {
                        attributeType
                        description
                        displayName
                        schemaType
                        unit
                        userDefinedId
                      }
                      description
                      displayName
                      userDefinedId
                    }
                    state
                    version
                  }
                  dateCreated
                  dateUpdated
                  description
                  displayName
                  ownerUserId
                  state
                  stateHistory {
                    dateCreated
                    message
                    newState
                  }
                  timeSettings {
                    actualStartTime
                    actualStopTime
                    errors
                    scheduledStartTime
                    scheduledStopTime
                    startTimeType
                    state
                    stopTimeType
                  }
                }
                dataStore {
                  dataStoreId
                  description
                  homeDirectoryId
                  name
                  ownerUserId
                }
                iotEndpointGroup {
                  description
                  endpoints {
                    description
                    iotEndpointId
                    iotHubId
                    modelId
                    name
                    ownerUserId
                    properties {
                      attributeType
                      defaultValue
                      description
                      name
                      schemaType
                      timestamp
                      value
                      writable
                    }
                    telemetry {
                      attributeType
                      description
                      index
                      name
                      schemaType
                    }
                  }
                  iotEndpointIds
                  iotGroupId
                  iotHubId
                  name
                  ownerUserId
                }
                ocsAdapter {
                  ocsAdapterId
                }
                serviceId
                serviceType
                timeSeriesDb {
                  databaseName
                  description
                  name
                  ownerUserId
                  tableName
                  timeSeriesDbId
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"collaborativeId": collaborative_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return CollaborativeListCollaborativeServices.parse_obj(data)

    async def platform_admin_list_organizations(self) -> PlatformAdminListOrganizations:
        query = gql(
            """
            query platformAdmin_listOrganizations {
              platformAdmin_listOrganizations {
                hostOrganization
                name
                organizationId
              }
            }
            """
        )
        variables: dict[str, object] = {}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return PlatformAdminListOrganizations.parse_obj(data)

    async def platform_admin_list_users(
        self, organization_id: Union[Optional[str], UnsetType] = UNSET
    ) -> PlatformAdminListUsers:
        query = gql(
            """
            query platformAdmin_listUsers($organizationId: ID) {
              platformAdmin_listUsers(organizationId: $organizationId) {
                email
                firstName
                lastActive
                lastName
                mobile
                organization {
                  hostOrganization
                  name
                  organizationId
                }
                userAccountState
                userId
                userRoles
              }
            }
            """
        )
        variables: dict[str, object] = {"organizationId": organization_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return PlatformAdminListUsers.parse_obj(data)

    async def iot_list_hubs_endpoints_last_values(
        self,
        iot_hub_id: str,
        client_token: Union[Optional[str], UnsetType] = UNSET,
        next_token: Union[Optional[str], UnsetType] = UNSET,
        query_id: Union[Optional[str], UnsetType] = UNSET,
        query_string: Union[Optional[str], UnsetType] = UNSET,
    ) -> IotListHubsEndpointsLastValues:
        query = gql(
            """
            query iot_listHubsEndpointsLastValues($clientToken: String, $iotHubId: ID!, $nextToken: String, $queryId: String, $queryString: String) {
              iot_listHubsEndpointsLastValues(
                clientToken: $clientToken
                iotHubId: $iotHubId
                nextToken: $nextToken
                queryId: $queryId
                queryString: $queryString
              ) {
                clientToken
                data {
                  iotEndpointId
                  telemetryValues {
                    telemetryModel {
                      attributeType
                      description
                      index
                      name
                      schemaType
                    }
                    timestamp
                    value
                  }
                }
                nextToken
                presignedUrl
                queryId
                resultChunkIndex
                resultStoredInS3
              }
            }
            """
        )
        variables: dict[str, object] = {
            "clientToken": client_token,
            "iotHubId": iot_hub_id,
            "nextToken": next_token,
            "queryId": query_id,
            "queryString": query_string,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return IotListHubsEndpointsLastValues.parse_obj(data)

    async def storage_get_data_store_file(
        self, data_store_file_id: str
    ) -> StorageGetDataStoreFile:
        query = gql(
            """
            query storage_getDataStoreFile($dataStoreFileId: ID!) {
              storage_getDataStoreFile(dataStoreFileId: $dataStoreFileId) {
                contentType
                dataStoreDirectoryId
                dataStoreFileId
                dataStoreId
                dataViewIds
                description
                fileExtension
                lastModified
                name
                ownerUserId
                s3ConfirmedUpload
                storageSizeBytes
              }
            }
            """
        )
        variables: dict[str, object] = {"dataStoreFileId": data_store_file_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return StorageGetDataStoreFile.parse_obj(data)

    async def platform_admin_list_collaboratives(
        self, include_member_organizations: Union[Optional[bool], UnsetType] = UNSET
    ) -> PlatformAdminListCollaboratives:
        query = gql(
            """
            query platformAdmin_listCollaboratives($includeMemberOrganizations: Boolean) {
              platformAdmin_listCollaboratives(
                includeMemberOrganizations: $includeMemberOrganizations
              ) {
                collaborativeId
                description
                hostOrganizationId
                memberOrganizations {
                  accessApprovedByUserId
                  collaborativeId
                  memberState
                  organization {
                    hostOrganization
                    name
                    organizationId
                  }
                  submittedByUser {
                    email
                    firstName
                    lastActive
                    lastName
                    mobile
                    organization {
                      hostOrganization
                      name
                      organizationId
                    }
                    userAccountState
                    userId
                    userRoles
                  }
                  submittedTimestamp
                  usersInCollaborative {
                    permission
                    user {
                      email
                      firstName
                      lastActive
                      lastName
                      mobile
                      organization {
                        hostOrganization
                        name
                        organizationId
                      }
                      userAccountState
                      userId
                      userRoles
                    }
                  }
                }
                name
              }
            }
            """
        )
        variables: dict[str, object] = {
            "includeMemberOrganizations": include_member_organizations
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return PlatformAdminListCollaboratives.parse_obj(data)

    async def iot_get_model(self, model_id: str) -> IotGetModel:
        query = gql(
            """
            query iot_getModel($modelId: ID!) {
              iot_getModel(modelId: $modelId) {
                description
                displayName
                dtmi
                modelId
                ownerUserId
                properties {
                  attributeType
                  defaultValue
                  description
                  index
                  name
                  schemaType
                  writable
                }
                telemetry {
                  attributeType
                  description
                  index
                  name
                  schemaType
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"modelId": model_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return IotGetModel.parse_obj(data)

    async def time_series_db_query_database_with_timestream_query(
        self,
        query_string: str,
        time_series_db_id: str,
        client_token: Union[Optional[str], UnsetType] = UNSET,
        max_rows: Union[Optional[int], UnsetType] = UNSET,
        next_token: Union[Optional[str], UnsetType] = UNSET,
    ) -> TimeSeriesDbQueryDatabaseWithTimestreamQuery:
        query = gql(
            """
            query timeSeriesDb_queryDatabaseWithTimestreamQuery($clientToken: String, $maxRows: Int, $nextToken: String, $queryString: String!, $timeSeriesDbId: ID!) {
              timeSeriesDb_queryDatabaseWithTimestreamQuery(
                clientToken: $clientToken
                maxRows: $maxRows
                nextToken: $nextToken
                queryString: $queryString
                timeSeriesDbId: $timeSeriesDbId
              ) {
                clientToken
                resultJSONString
              }
            }
            """
        )
        variables: dict[str, object] = {
            "clientToken": client_token,
            "maxRows": max_rows,
            "nextToken": next_token,
            "queryString": query_string,
            "timeSeriesDbId": time_series_db_id,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return TimeSeriesDbQueryDatabaseWithTimestreamQuery.parse_obj(data)

    async def time_series_db_list_databases(self) -> TimeSeriesDbListDatabases:
        query = gql(
            """
            query timeSeriesDb_listDatabases {
              timeSeriesDb_listDatabases {
                databaseName
                description
                name
                ownerUserId
                tableName
                timeSeriesDbId
              }
            }
            """
        )
        variables: dict[str, object] = {}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return TimeSeriesDbListDatabases.parse_obj(data)

    async def storage_get_data_store_zip_download_url(
        self, data_store_object_ids: List[DataStoreObjectIdInput]
    ) -> StorageGetDataStoreZipDownloadUrl:
        query = gql(
            """
            query storage_getDataStoreZipDownloadUrl($dataStoreObjectIds: [DataStoreObjectIdInput]!) {
              storage_getDataStoreZipDownloadUrl(dataStoreObjectIds: $dataStoreObjectIds) {
                itemId
                uploadId
                url
              }
            }
            """
        )
        variables: dict[str, object] = {"dataStoreObjectIds": data_store_object_ids}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return StorageGetDataStoreZipDownloadUrl.parse_obj(data)

    async def platform_admin_get_collaborative(
        self,
        collaborative_id: str,
        include_member_organizations: Union[Optional[bool], UnsetType] = UNSET,
    ) -> PlatformAdminGetCollaborative:
        query = gql(
            """
            query platformAdmin_getCollaborative($collaborativeId: ID!, $includeMemberOrganizations: Boolean) {
              platformAdmin_getCollaborative(
                collaborativeId: $collaborativeId
                includeMemberOrganizations: $includeMemberOrganizations
              ) {
                collaborativeId
                description
                hostOrganizationId
                memberOrganizations {
                  accessApprovedByUserId
                  collaborativeId
                  memberState
                  organization {
                    hostOrganization
                    name
                    organizationId
                  }
                  submittedByUser {
                    email
                    firstName
                    lastActive
                    lastName
                    mobile
                    organization {
                      hostOrganization
                      name
                      organizationId
                    }
                    userAccountState
                    userId
                    userRoles
                  }
                  submittedTimestamp
                  usersInCollaborative {
                    permission
                    user {
                      email
                      firstName
                      lastActive
                      lastName
                      mobile
                      organization {
                        hostOrganization
                        name
                        organizationId
                      }
                      userAccountState
                      userId
                      userRoles
                    }
                  }
                }
                name
              }
            }
            """
        )
        variables: dict[str, object] = {
            "collaborativeId": collaborative_id,
            "includeMemberOrganizations": include_member_organizations,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return PlatformAdminGetCollaborative.parse_obj(data)

    async def user_list_authentication_tokens(self) -> UserListAuthenticationTokens:
        query = gql(
            """
            query user_listAuthenticationTokens {
              user_listAuthenticationTokens {
                dateCreated
                dateExpires
                lastActive
                name
                scope
                tokenId
                tokenType
                tokenValue
                userId
              }
            }
            """
        )
        variables: dict[str, object] = {}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return UserListAuthenticationTokens.parse_obj(data)

    async def platform_admin_get_organization(
        self, organization_id: str
    ) -> PlatformAdminGetOrganization:
        query = gql(
            """
            query platformAdmin_getOrganization($organizationId: ID!) {
              platformAdmin_getOrganization(organizationId: $organizationId) {
                hostOrganization
                name
                organizationId
              }
            }
            """
        )
        variables: dict[str, object] = {"organizationId": organization_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return PlatformAdminGetOrganization.parse_obj(data)

    async def storage_list_data_stores(
        self,
        organization_id: Union[Optional[str], UnsetType] = UNSET,
        user_id: Union[Optional[str], UnsetType] = UNSET,
    ) -> StorageListDataStores:
        query = gql(
            """
            query storage_listDataStores($organizationId: ID, $userId: ID) {
              storage_listDataStores(organizationId: $organizationId, userId: $userId) {
                dataStoreId
                description
                homeDirectoryId
                name
                ownerUserId
              }
            }
            """
        )
        variables: dict[str, object] = {
            "organizationId": organization_id,
            "userId": user_id,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return StorageListDataStores.parse_obj(data)

    async def iot_list_endpoints_in_hub(self, iot_hub_id: str) -> IotListEndpointsInHub:
        query = gql(
            """
            query iot_listEndpointsInHub($iotHubId: ID!) {
              iot_listEndpointsInHub(iotHubId: $iotHubId) {
                description
                iotEndpointId
                iotHubId
                modelId
                name
                ownerUserId
                properties {
                  attributeType
                  defaultValue
                  description
                  name
                  schemaType
                  timestamp
                  value
                  writable
                }
                telemetry {
                  attributeType
                  description
                  index
                  name
                  schemaType
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"iotHubId": iot_hub_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return IotListEndpointsInHub.parse_obj(data)

    async def data_capture_get_capture(
        self,
        capture_id: str,
        include_data_model: Union[Optional[bool], UnsetType] = UNSET,
    ) -> DataCaptureGetCapture:
        query = gql(
            """
            query dataCapture_getCapture($captureId: ID!, $includeDataModel: Boolean) {
              dataCapture_getCapture(
                captureId: $captureId
                includeDataModel: $includeDataModel
              ) {
                captureId
                captureType
                dataModel {
                  dateCreated
                  dateUpdated
                  errors
                  items {
                    attributes {
                      attributeType
                      description
                      displayName
                      schemaType
                      unit
                      userDefinedId
                    }
                    description
                    displayName
                    userDefinedId
                  }
                  state
                  version
                }
                dateCreated
                dateUpdated
                description
                displayName
                ownerUserId
                state
                stateHistory {
                  dateCreated
                  message
                  newState
                }
                timeSettings {
                  actualStartTime
                  actualStopTime
                  errors
                  scheduledStartTime
                  scheduledStopTime
                  startTimeType
                  state
                  stopTimeType
                }
              }
            }
            """
        )
        variables: dict[str, object] = {
            "captureId": capture_id,
            "includeDataModel": include_data_model,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return DataCaptureGetCapture.parse_obj(data)

    async def iot_list_models(self) -> IotListModels:
        query = gql(
            """
            query iot_listModels {
              iot_listModels {
                description
                displayName
                dtmi
                modelId
                ownerUserId
                properties {
                  attributeType
                  defaultValue
                  description
                  index
                  name
                  schemaType
                  writable
                }
                telemetry {
                  attributeType
                  description
                  index
                  name
                  schemaType
                }
              }
            }
            """
        )
        variables: dict[str, object] = {}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return IotListModels.parse_obj(data)

    async def storage_get_data_store_directory(
        self, data_store_directory_id: str
    ) -> StorageGetDataStoreDirectory:
        query = gql(
            """
            query storage_getDataStoreDirectory($dataStoreDirectoryId: ID!) {
              storage_getDataStoreDirectory(dataStoreDirectoryId: $dataStoreDirectoryId) {
                contents {
                  dataStoreDirectory {
                    contents {
                      dataStoreFile {
                        contentType
                        dataStoreDirectoryId
                        dataStoreFileId
                        dataStoreId
                        dataViewIds
                        description
                        fileExtension
                        lastModified
                        name
                        ownerUserId
                        s3ConfirmedUpload
                        storageSizeBytes
                      }
                      objectType
                    }
                    dataStoreDirectoryId
                    dataStoreId
                    homeDirectory
                    name
                    ownerUserId
                    parentDirectoryId
                  }
                  objectType
                }
                dataStoreDirectoryId
                dataStoreId
                homeDirectory
                name
                ownerUserId
                parentDirectoryId
              }
            }
            """
        )
        variables: dict[str, object] = {"dataStoreDirectoryId": data_store_directory_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return StorageGetDataStoreDirectory.parse_obj(data)

    async def data_capture_get_capture_authentication_token(
        self, capture_id: str
    ) -> DataCaptureGetCaptureAuthenticationToken:
        query = gql(
            """
            query dataCapture_getCaptureAuthenticationToken($captureId: ID!) {
              dataCapture_getCaptureAuthenticationToken(captureId: $captureId) {
                dateCreated
                dateExpires
                lastActive
                name
                scope
                tokenId
                tokenType
                tokenValue
                userId
              }
            }
            """
        )
        variables: dict[str, object] = {"captureId": capture_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return DataCaptureGetCaptureAuthenticationToken.parse_obj(data)

    async def time_series_db_get_database(
        self, time_series_db_id: str
    ) -> TimeSeriesDbGetDatabase:
        query = gql(
            """
            query timeSeriesDb_getDatabase($timeSeriesDbId: ID!) {
              timeSeriesDb_getDatabase(timeSeriesDbId: $timeSeriesDbId) {
                databaseName
                description
                name
                ownerUserId
                tableName
                timeSeriesDbId
              }
            }
            """
        )
        variables: dict[str, object] = {"timeSeriesDbId": time_series_db_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return TimeSeriesDbGetDatabase.parse_obj(data)

    async def iot_list_groups_endpoints_last_values(
        self,
        iot_group_id: str,
        client_token: Union[Optional[str], UnsetType] = UNSET,
        next_token: Union[Optional[str], UnsetType] = UNSET,
        query_id: Union[Optional[str], UnsetType] = UNSET,
        query_string: Union[Optional[str], UnsetType] = UNSET,
    ) -> IotListGroupsEndpointsLastValues:
        query = gql(
            """
            query iot_listGroupsEndpointsLastValues($clientToken: String, $iotGroupId: ID!, $nextToken: String, $queryId: String, $queryString: String) {
              iot_listGroupsEndpointsLastValues(
                clientToken: $clientToken
                iotGroupId: $iotGroupId
                nextToken: $nextToken
                queryId: $queryId
                queryString: $queryString
              ) {
                clientToken
                data {
                  iotEndpointId
                  telemetryValues {
                    telemetryModel {
                      attributeType
                      description
                      index
                      name
                      schemaType
                    }
                    timestamp
                    value
                  }
                }
                nextToken
                presignedUrl
                queryId
                resultChunkIndex
                resultStoredInS3
              }
            }
            """
        )
        variables: dict[str, object] = {
            "clientToken": client_token,
            "iotGroupId": iot_group_id,
            "nextToken": next_token,
            "queryId": query_id,
            "queryString": query_string,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return IotListGroupsEndpointsLastValues.parse_obj(data)

    async def data_capture_get_data_model(
        self, capture_id: str
    ) -> DataCaptureGetDataModel:
        query = gql(
            """
            query dataCapture_getDataModel($captureId: ID!) {
              dataCapture_getDataModel(captureId: $captureId) {
                dateCreated
                dateUpdated
                errors
                items {
                  attributes {
                    attributeType
                    description
                    displayName
                    schemaType
                    unit
                    userDefinedId
                  }
                  description
                  displayName
                  userDefinedId
                }
                state
                version
              }
            }
            """
        )
        variables: dict[str, object] = {"captureId": capture_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return DataCaptureGetDataModel.parse_obj(data)

    async def iot_get_group(
        self,
        iot_group_id: str,
        include_endpoints: Union[Optional[bool], UnsetType] = UNSET,
    ) -> IotGetGroup:
        query = gql(
            """
            query iot_getGroup($includeEndpoints: Boolean, $iotGroupId: ID!) {
              iot_getGroup(includeEndpoints: $includeEndpoints, iotGroupId: $iotGroupId) {
                description
                endpoints {
                  description
                  iotEndpointId
                  iotHubId
                  modelId
                  name
                  ownerUserId
                  properties {
                    attributeType
                    defaultValue
                    description
                    name
                    schemaType
                    timestamp
                    value
                    writable
                  }
                  telemetry {
                    attributeType
                    description
                    index
                    name
                    schemaType
                  }
                }
                iotEndpointIds
                iotGroupId
                iotHubId
                name
                ownerUserId
              }
            }
            """
        )
        variables: dict[str, object] = {
            "includeEndpoints": include_endpoints,
            "iotGroupId": iot_group_id,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return IotGetGroup.parse_obj(data)

    async def iot_get_hub(self, iot_hub_id: str) -> IotGetHub:
        query = gql(
            """
            query iot_getHub($iotHubId: ID!) {
              iot_getHub(iotHubId: $iotHubId) {
                description
                iotHubId
                name
                ownerUserId
              }
            }
            """
        )
        variables: dict[str, object] = {"iotHubId": iot_hub_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return IotGetHub.parse_obj(data)

    async def on_iot_publish(self, iot_endpoint_id: str) -> AsyncIterator[OnIotPublish]:
        query = gql(
            """
            subscription onIotPublish($iotEndpointId: ID!) {
              onIotPublish(iotEndpointId: $iotEndpointId) {
                failedRecords {
                  errors {
                    errorMessage
                    errorType
                  }
                  record {
                    attributes {
                      name
                      schemaType
                      value
                    }
                    iotEndpointId
                    timestamp
                  }
                }
                recordsWritten {
                  attributes {
                    name
                    schemaType
                    value
                  }
                  iotEndpointId
                  timestamp
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"iotEndpointId": iot_endpoint_id}
        async for data in self.execute_ws(query=query, variables=variables):
            yield OnIotPublish.parse_obj(data)

    async def on_notify_iot_query_export_complete(
        self, query_id: str
    ) -> AsyncIterator[OnNotifyIotQueryExportComplete]:
        query = gql(
            """
            subscription onNotifyIotQueryExportComplete($queryId: String!) {
              onNotifyIotQueryExportComplete(queryId: $queryId) {
                fileFormat
                fileSizeBytes
                queryId
                url
              }
            }
            """
        )
        variables: dict[str, object] = {"queryId": query_id}
        async for data in self.execute_ws(query=query, variables=variables):
            yield OnNotifyIotQueryExportComplete.parse_obj(data)

    async def on_notify_upload_complete(
        self, upload_id: str
    ) -> AsyncIterator[OnNotifyUploadComplete]:
        query = gql(
            """
            subscription onNotifyUploadComplete($uploadId: ID!) {
              onNotifyUploadComplete(uploadId: $uploadId) {
                errorMessage
                httpStatusCode
                uploadId
              }
            }
            """
        )
        variables: dict[str, object] = {"uploadId": upload_id}
        async for data in self.execute_ws(query=query, variables=variables):
            yield OnNotifyUploadComplete.parse_obj(data)

    async def on_capture_publish_data(
        self, capture_id: str
    ) -> AsyncIterator[OnCapturePublishData]:
        query = gql(
            """
            subscription onCapturePublishData($captureId: ID!) {
              onCapturePublishData(captureId: $captureId) {
                captureId
                dataWritten {
                  timestamp
                  userDefinedId
                  value
                }
                failedRecords {
                  attributeIndex
                  errorType
                  message
                  recordIndex
                }
                logs {
                  error
                  message
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"captureId": capture_id}
        async for data in self.execute_ws(query=query, variables=variables):
            yield OnCapturePublishData.parse_obj(data)

    async def on_time_series_db_publish(
        self, asset_id: str, time_series_db_id: str
    ) -> AsyncIterator[OnTimeSeriesDbPublish]:
        query = gql(
            """
            subscription onTimeSeriesDbPublish($assetId: ID!, $timeSeriesDbId: ID!) {
              onTimeSeriesDbPublish(assetId: $assetId, timeSeriesDbId: $timeSeriesDbId) {
                assetId
                attributes {
                  attributeType
                  data {
                    timestamp
                    value
                  }
                  lastValue
                  lastValueTime
                  name
                }
                name
              }
            }
            """
        )
        variables: dict[str, object] = {
            "assetId": asset_id,
            "timeSeriesDbId": time_series_db_id,
        }
        async for data in self.execute_ws(query=query, variables=variables):
            yield OnTimeSeriesDbPublish.parse_obj(data)

    async def on_stop_capture(self, capture_id: str) -> AsyncIterator[OnStopCapture]:
        query = gql(
            """
            subscription onStopCapture($captureId: ID!) {
              onStopCapture(captureId: $captureId) {
                captureId
                captureType
                dataModel {
                  dateCreated
                  dateUpdated
                  errors
                  items {
                    attributes {
                      attributeType
                      description
                      displayName
                      schemaType
                      unit
                      userDefinedId
                    }
                    description
                    displayName
                    userDefinedId
                  }
                  state
                  version
                }
                dateCreated
                dateUpdated
                description
                displayName
                ownerUserId
                state
                stateHistory {
                  dateCreated
                  message
                  newState
                }
                timeSettings {
                  actualStartTime
                  actualStopTime
                  errors
                  scheduledStartTime
                  scheduledStopTime
                  startTimeType
                  state
                  stopTimeType
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"captureId": capture_id}
        async for data in self.execute_ws(query=query, variables=variables):
            yield OnStopCapture.parse_obj(data)

    async def on_notify_time_series_query_export_complete(
        self, query_id: str
    ) -> AsyncIterator[OnNotifyTimeSeriesQueryExportComplete]:
        query = gql(
            """
            subscription onNotifyTimeSeriesQueryExportComplete($queryId: String!) {
              onNotifyTimeSeriesQueryExportComplete(queryId: $queryId) {
                fileSizeBytes
                fileType
                queryId
                url
              }
            }
            """
        )
        variables: dict[str, object] = {"queryId": query_id}
        async for data in self.execute_ws(query=query, variables=variables):
            yield OnNotifyTimeSeriesQueryExportComplete.parse_obj(data)

    async def on_start_capture(self, capture_id: str) -> AsyncIterator[OnStartCapture]:
        query = gql(
            """
            subscription onStartCapture($captureId: ID!) {
              onStartCapture(captureId: $captureId) {
                captureId
                captureType
                dataModel {
                  dateCreated
                  dateUpdated
                  errors
                  items {
                    attributes {
                      attributeType
                      description
                      displayName
                      schemaType
                      unit
                      userDefinedId
                    }
                    description
                    displayName
                    userDefinedId
                  }
                  state
                  version
                }
                dateCreated
                dateUpdated
                description
                displayName
                ownerUserId
                state
                stateHistory {
                  dateCreated
                  message
                  newState
                }
                timeSettings {
                  actualStartTime
                  actualStopTime
                  errors
                  scheduledStartTime
                  scheduledStopTime
                  startTimeType
                  state
                  stopTimeType
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"captureId": capture_id}
        async for data in self.execute_ws(query=query, variables=variables):
            yield OnStartCapture.parse_obj(data)

    async def on_notify_capture_complete(
        self, capture_id: str
    ) -> AsyncIterator[OnNotifyCaptureComplete]:
        query = gql(
            """
            subscription onNotifyCaptureComplete($captureId: ID!) {
              onNotifyCaptureComplete(captureId: $captureId) {
                captureId
                captureType
                dataModel {
                  dateCreated
                  dateUpdated
                  errors
                  items {
                    attributes {
                      attributeType
                      description
                      displayName
                      schemaType
                      unit
                      userDefinedId
                    }
                    description
                    displayName
                    userDefinedId
                  }
                  state
                  version
                }
                dateCreated
                dateUpdated
                description
                displayName
                ownerUserId
                state
                stateHistory {
                  dateCreated
                  message
                  newState
                }
                timeSettings {
                  actualStartTime
                  actualStopTime
                  errors
                  scheduledStartTime
                  scheduledStopTime
                  startTimeType
                  state
                  stopTimeType
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"captureId": capture_id}
        async for data in self.execute_ws(query=query, variables=variables):
            yield OnNotifyCaptureComplete.parse_obj(data)
