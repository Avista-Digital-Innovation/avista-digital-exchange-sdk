# Generated by ariadne-codegen on 2023-07-17 15:57
# Source: ../step_1_gqlg/output/queries.graphql

from typing import List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import DataStoreObjectType


class StorageGetDataStoreDirectory(BaseModel):
    storage_get_data_store_directory: Optional[
        "StorageGetDataStoreDirectoryStorageGetDataStoreDirectory"
    ] = Field(alias="storage_getDataStoreDirectory")


class StorageGetDataStoreDirectoryStorageGetDataStoreDirectory(BaseModel):
    contents: Optional[
        List[
            Optional["StorageGetDataStoreDirectoryStorageGetDataStoreDirectoryContents"]
        ]
    ]
    data_store_directory_id: str = Field(alias="dataStoreDirectoryId")
    data_store_id: Optional[str] = Field(alias="dataStoreId")
    home_directory: Optional[bool] = Field(alias="homeDirectory")
    name: str
    owner_user_id: Optional[str] = Field(alias="ownerUserId")
    parent_directory_id: Optional[str] = Field(alias="parentDirectoryId")


class StorageGetDataStoreDirectoryStorageGetDataStoreDirectoryContents(BaseModel):
    data_store_directory: Optional[
        "StorageGetDataStoreDirectoryStorageGetDataStoreDirectoryContentsDataStoreDirectory"
    ] = Field(alias="dataStoreDirectory")
    object_type: DataStoreObjectType = Field(alias="objectType")


class StorageGetDataStoreDirectoryStorageGetDataStoreDirectoryContentsDataStoreDirectory(
    BaseModel
):
    contents: Optional[
        List[
            Optional[
                "StorageGetDataStoreDirectoryStorageGetDataStoreDirectoryContentsDataStoreDirectoryContents"
            ]
        ]
    ]
    data_store_directory_id: str = Field(alias="dataStoreDirectoryId")
    data_store_id: Optional[str] = Field(alias="dataStoreId")
    home_directory: Optional[bool] = Field(alias="homeDirectory")
    name: str
    owner_user_id: Optional[str] = Field(alias="ownerUserId")
    parent_directory_id: Optional[str] = Field(alias="parentDirectoryId")


class StorageGetDataStoreDirectoryStorageGetDataStoreDirectoryContentsDataStoreDirectoryContents(
    BaseModel
):
    data_store_file: Optional[
        "StorageGetDataStoreDirectoryStorageGetDataStoreDirectoryContentsDataStoreDirectoryContentsDataStoreFile"
    ] = Field(alias="dataStoreFile")
    object_type: DataStoreObjectType = Field(alias="objectType")


class StorageGetDataStoreDirectoryStorageGetDataStoreDirectoryContentsDataStoreDirectoryContentsDataStoreFile(
    BaseModel
):
    content_type: Optional[str] = Field(alias="contentType")
    data_store_directory_id: Optional[str] = Field(alias="dataStoreDirectoryId")
    data_store_file_id: str = Field(alias="dataStoreFileId")
    data_store_id: Optional[str] = Field(alias="dataStoreId")
    data_view_ids: Optional[List[Optional[str]]] = Field(alias="dataViewIds")
    description: Optional[str]
    file_extension: Optional[str] = Field(alias="fileExtension")
    last_modified: Optional[str] = Field(alias="lastModified")
    name: str
    owner_user_id: Optional[str] = Field(alias="ownerUserId")
    s3_confirmed_upload: Optional[bool] = Field(alias="s3ConfirmedUpload")
    storage_size_bytes: Optional[int] = Field(alias="storageSizeBytes")


StorageGetDataStoreDirectory.update_forward_refs()
StorageGetDataStoreDirectoryStorageGetDataStoreDirectory.update_forward_refs()
StorageGetDataStoreDirectoryStorageGetDataStoreDirectoryContents.update_forward_refs()
StorageGetDataStoreDirectoryStorageGetDataStoreDirectoryContentsDataStoreDirectory.update_forward_refs()
StorageGetDataStoreDirectoryStorageGetDataStoreDirectoryContentsDataStoreDirectoryContents.update_forward_refs()
StorageGetDataStoreDirectoryStorageGetDataStoreDirectoryContentsDataStoreDirectoryContentsDataStoreFile.update_forward_refs()
