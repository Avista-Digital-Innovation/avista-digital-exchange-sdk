# Generated by ariadne-codegen on 2023-07-17 15:57
# Source: ../step_1_gqlg/output/queries.graphql

from typing import List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import ModelAttributeType, ModelSchemaType


class IotDeleteModel(BaseModel):
    iot_delete_model: Optional["IotDeleteModelIotDeleteModel"] = Field(
        alias="iot_deleteModel"
    )


class IotDeleteModelIotDeleteModel(BaseModel):
    description: Optional[str]
    display_name: str = Field(alias="displayName")
    dtmi: str
    model_id: str = Field(alias="modelId")
    owner_user_id: str = Field(alias="ownerUserId")
    properties: Optional[List[Optional["IotDeleteModelIotDeleteModelProperties"]]]
    telemetry: Optional[List[Optional["IotDeleteModelIotDeleteModelTelemetry"]]]


class IotDeleteModelIotDeleteModelProperties(BaseModel):
    attribute_type: ModelAttributeType = Field(alias="attributeType")
    default_value: Optional[str] = Field(alias="defaultValue")
    description: Optional[str]
    index: Optional[int]
    name: str
    schema_type: ModelSchemaType = Field(alias="schemaType")
    writable: Optional[bool]


class IotDeleteModelIotDeleteModelTelemetry(BaseModel):
    attribute_type: ModelAttributeType = Field(alias="attributeType")
    description: Optional[str]
    index: Optional[int]
    name: str
    schema_type: ModelSchemaType = Field(alias="schemaType")


IotDeleteModel.update_forward_refs()
IotDeleteModelIotDeleteModel.update_forward_refs()
IotDeleteModelIotDeleteModelProperties.update_forward_refs()
IotDeleteModelIotDeleteModelTelemetry.update_forward_refs()
